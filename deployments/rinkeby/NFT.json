{
  "address": "0xf4F00bd3A62bbd7fcAd2B6409F22ddf1E0330f88",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_proxyRegistryAddress",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "cURI",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "tokenURI",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address payable",
          "name": "relayerAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "functionSignature",
          "type": "bytes"
        }
      ],
      "name": "MetaTransactionExecuted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "_value",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "PermanentURI",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "TransferBatch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "TransferSingle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "value",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "URI",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ERC712_VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_TOKEN_COUNT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_price",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "balanceOfBatch",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "batchMakePermanent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "initialOwners",
          "type": "address[]"
        },
        {
          "internalType": "uint256[][]",
          "name": "idsPerOwner",
          "type": "uint256[][]"
        },
        {
          "internalType": "string",
          "name": "uri",
          "type": "string"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "batchMint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "recipients",
          "type": "address[]"
        },
        {
          "internalType": "uint256[][]",
          "name": "idsPerRecipient",
          "type": "uint256[][]"
        }
      ],
      "name": "batchTransferToMany",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "functionSignature",
          "type": "bytes"
        },
        {
          "internalType": "bytes32",
          "name": "sigR",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "sigS",
          "type": "bytes32"
        },
        {
          "internalType": "uint8",
          "name": "sigV",
          "type": "uint8"
        }
      ],
      "name": "executeMetaTransaction",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "exists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getChainId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDomainSeperator",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getNonce",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isOperator",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "makePermanent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "initialOwner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "uri",
          "type": "string"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "mint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "count",
          "type": "uint256"
        }
      ],
      "name": "publicMint",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeBatchTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "newuri",
          "type": "string"
        }
      ],
      "name": "setContractURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_newURI",
          "type": "string"
        }
      ],
      "name": "setCustomURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_newURI",
          "type": "string"
        }
      ],
      "name": "setURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokenSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "payee",
          "type": "address"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x345533d68484f11faf3bddc396f38ed75a5d99014e8e86d2e825d2990735fb5c",
  "receipt": {
    "to": null,
    "from": "0x3F70545715367397C364feEcd19744e009bf5F5e",
    "contractAddress": "0xf4F00bd3A62bbd7fcAd2B6409F22ddf1E0330f88",
    "transactionIndex": 14,
    "gasUsed": "5700508",
    "logsBloom": "0x00000000400000004000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000800000000000000000000020000000000000000000a00000000000000002000000000000000400000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0xafa9022bde5504b15b587cc34b0362ea511f078b3739b6c6068a6ccfa84ff10f",
    "transactionHash": "0x345533d68484f11faf3bddc396f38ed75a5d99014e8e86d2e825d2990735fb5c",
    "logs": [
      {
        "transactionIndex": 14,
        "blockNumber": 10022198,
        "transactionHash": "0x345533d68484f11faf3bddc396f38ed75a5d99014e8e86d2e825d2990735fb5c",
        "address": "0xf4F00bd3A62bbd7fcAd2B6409F22ddf1E0330f88",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000003f70545715367397c364feecd19744e009bf5f5e"
        ],
        "data": "0x",
        "logIndex": 12,
        "blockHash": "0xafa9022bde5504b15b587cc34b0362ea511f078b3739b6c6068a6ccfa84ff10f"
      }
    ],
    "blockNumber": 10022198,
    "cumulativeGasUsed": "14117794",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xf57b2c51ded3a29e6891aba85459d600256cf317",
    "Gangen Alumni",
    "GANGA",
    "https://gangenalumni.s3.us-east-2.amazonaws.com/rinkeby/data/contract.json",
    "https://gangenalumni.s3.us-east-2.amazonaws.com/rinkeby/data/{id}.json"
  ],
  "solcInputHash": "0ce7e083e912256994ab24422cc598c5",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_proxyRegistryAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"cURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address payable\",\"name\":\"relayerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"functionSignature\",\"type\":\"bytes\"}],\"name\":\"MetaTransactionExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"PermanentURI\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ERC712_VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_TOKEN_COUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"batchMakePermanent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"initialOwners\",\"type\":\"address[]\"},{\"internalType\":\"uint256[][]\",\"name\":\"idsPerOwner\",\"type\":\"uint256[][]\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"batchMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[][]\",\"name\":\"idsPerRecipient\",\"type\":\"uint256[][]\"}],\"name\":\"batchTransferToMany\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"functionSignature\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"sigR\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"sigS\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"sigV\",\"type\":\"uint8\"}],\"name\":\"executeMetaTransaction\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getChainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDomainSeperator\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isOperator\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"makePermanent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"initialOwner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"publicMint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newuri\",\"type\":\"string\"}],\"name\":\"setContractURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_newURI\",\"type\":\"string\"}],\"name\":\"setCustomURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_newURI\",\"type\":\"string\"}],\"name\":\"setURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"payee\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"balanceOf(address,uint256)\":{\"details\":\"See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address.\"},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length.\"},\"batchMint(address[],uint256[][],string,bytes)\":{\"details\":\"Mint new tokens for each id in _ids\",\"params\":{\"data\":\"Data to pass if receiver is contract\",\"idsPerOwner\":\"2d Array of ids to mint for each owner. Required to be the same length as initialOwners.\",\"initialOwners\":\"The addresses to mint tokens to\",\"uri\":\"The Custom URI to set against each newly created Token\"}},\"mint(address,uint256,string,bytes)\":{\"details\":\"Mint a new token type and assigns _initialSupply to an address\",\"params\":{\"data\":\"Data to pass if receiver is contract\",\"id\":\"The id of the token to create (must not currenty exist).\",\"initialOwner\":\"address of the first owner of the token\",\"uri\":\"Optional URI for this token type\"},\"returns\":{\"_0\":\"The newly created token ID\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"publicMint(uint256)\":{\"details\":\"Publicly accessible: Mint new tokens to the contract caller based on the amount of value sent. Each token value is hard coded\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"See {IERC1155-safeBatchTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"details\":\"See {IERC1155-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC1155-setApprovalForAll}.\"},\"setCustomURI(uint256,string)\":{\"details\":\"Will update the base URI for the token\",\"params\":{\"_newURI\":\"New URI for the token.\",\"_tokenId\":\"The token to update. _msgSender() must be its creator.\"}},\"setURI(string)\":{\"details\":\"Sets a new URI for all token types, by relying on the token type ID substitution mechanism https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\",\"params\":{\"_newURI\":\"New URI for all tokens\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"totalSupply(uint256)\":{\"details\":\"Returns the total quantity for a token ID\",\"params\":{\"_id\":\"uint256 ID of the token to query\"},\"returns\":{\"_0\":\"amount of token in existence\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"withdraw(address)\":{\"details\":\"Withdraw funds used to publicly mint tokens\"}},\"title\":\"NFT NFT - a contract for non-fungible tokens using ERC 1155 for batch actions\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"batchMakePermanent(uint256[])\":{\"notice\":\"Mark all tokens permanent in batch\"},\"batchTransferToMany(address,address[],uint256[][])\":{\"notice\":\"Allows contract owner to mass transfer to many recipients in a single transaction\"},\"isApprovedForAll(address,address)\":{\"notice\":\"Override isApprovedForAll to whitelist user's OpenSea proxy accounts to enable gas-free listings.\"},\"makePermanent(uint256)\":{\"notice\":\"Mark a single token as permanent in batch\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/NFT.sol\":\"NFT\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/ERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155.sol\\\";\\nimport \\\"./IERC1155Receiver.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURI.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\\n    using Address for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    constructor(string memory uri_) {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: balance query for the zero address\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not owner nor approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: transfer caller is not owner nor approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        _balances[id][to] += amount;\\n        emit TransferSingle(operator, address(0), to, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `from`\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(\\n        address from,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), _asSingletonArray(id), _asSingletonArray(amount), \\\"\\\");\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, from, address(0), id, amount);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(\\n        address from,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, from, address(0), ids, amounts);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC1155: setting approval status for self\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n}\\n\",\"keccak256\":\"0x04d6d1342ece664085921a4fabc928a7bcf1cf2873fa81780f61a54dc2b9b66e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x8e93de94c9062ebc94fb7e2e3929b0781ac6a2b7772e2f7a59045861c93e5be9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n        @dev Handles the receipt of a single ERC1155 token type. This function is\\n        called at the end of a `safeTransferFrom` after the balance has been updated.\\n        To accept the transfer, this must return\\n        `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n        (i.e. 0xf23a6e61, or its own function selector).\\n        @param operator The address which initiated the transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param id The ID of the token being transferred\\n        @param value The amount of tokens being transferred\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\\n        is called at the end of a `safeBatchTransferFrom` after the balances have\\n        been updated. To accept the transfer(s), this must return\\n        `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n        (i.e. 0xbc197c81, or its own function selector).\\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xc743d2235b8854045c308d2f8f1ed88efed6c2bebf2b7a4a51ea42480c82e566\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xa66d18b9a85458d28fc3304717964502ae36f7f8a2ff35bc83f6f85d74b03574\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa2f576be637946f767aa56601c26d717f48a0aff44f82e46f13807eea1009a21\",\"license\":\"MIT\"},\"contracts/ERC1155Tradable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\nimport \\\"./common/meta-transactions/ContentMixin.sol\\\";\\nimport \\\"./common/meta-transactions/NativeMetaTransaction.sol\\\";\\n\\ncontract OwnableDelegateProxy {}\\n\\ncontract ProxyRegistry {\\n\\tmapping(address => OwnableDelegateProxy) public proxies;\\n}\\n\\n/**\\n * @title ERC1155Tradable\\n * ERC1155Tradable - ERC1155 contract that whitelists an operator address, has create and mint functionality, and supports useful standards from OpenZeppelin,\\n  like _exists(), name(), symbol(), and totalSupply()\\n */\\ncontract ERC1155Tradable is\\n\\tContextMixin,\\n\\tERC1155,\\n\\tNativeMetaTransaction,\\n\\tOwnable\\n{\\n\\tusing Strings for string;\\n\\tusing SafeMath for uint256;\\n\\n\\taddress proxyRegistryAddress;\\n\\tmapping(uint256 => uint256) public tokenSupply;\\n\\tmapping(uint256 => string) customUri;\\n\\t// Contract name\\n\\tstring public name;\\n\\t// Contract symbol\\n\\tstring public symbol;\\n\\n\\tconstructor(\\n\\t\\tstring memory _name,\\n\\t\\tstring memory _symbol,\\n\\t\\tstring memory _uri,\\n\\t\\taddress _proxyRegistryAddress\\n\\t) ERC1155(_uri) {\\n\\t\\tname = _name;\\n\\t\\tsymbol = _symbol;\\n\\t\\tproxyRegistryAddress = _proxyRegistryAddress;\\n\\t\\t_initializeEIP712(name);\\n\\t}\\n\\n\\tfunction uri(uint256 _id) public view override returns (string memory) {\\n\\t\\trequire(_exists(_id), \\\"ERC1155Tradable#uri: NONEXISTENT_TOKEN\\\");\\n\\t\\t// We have to convert string to bytes to check for existence\\n\\t\\tbytes memory customUriBytes = bytes(customUri[_id]);\\n\\t\\tif (customUriBytes.length > 0) {\\n\\t\\t\\treturn customUri[_id];\\n\\t\\t} else {\\n\\t\\t\\treturn super.uri(_id);\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns the total quantity for a token ID\\n\\t * @param _id uint256 ID of the token to query\\n\\t * @return amount of token in existence\\n\\t */\\n\\tfunction totalSupply(uint256 _id) public view returns (uint256) {\\n\\t\\treturn tokenSupply[_id];\\n\\t}\\n\\n\\t/**\\n\\t * @dev Sets a new URI for all token types, by relying on the token type ID\\n\\t * substitution mechanism\\n\\t * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n\\t * @param _newURI New URI for all tokens\\n\\t */\\n\\tfunction setURI(string memory _newURI) public onlyOwner {\\n\\t\\t_setURI(_newURI);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Will update the base URI for the token\\n\\t * @param _tokenId The token to update. _msgSender() must be its creator.\\n\\t * @param _newURI New URI for the token.\\n\\t */\\n\\tfunction setCustomURI(uint256 _tokenId, string memory _newURI)\\n\\t\\tpublic\\n\\t\\tonlyOwner\\n\\t{\\n\\t\\tcustomUri[_tokenId] = _newURI;\\n\\t\\temit URI(_newURI, _tokenId);\\n\\t}\\n\\n\\t/**\\n\\t * Override isApprovedForAll to whitelist user's OpenSea proxy accounts to enable gas-free listings.\\n\\t */\\n\\tfunction isApprovedForAll(address _owner, address _operator)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\toverride\\n\\t\\treturns (bool isOperator)\\n\\t{\\n\\t\\t// Whitelist OpenSea proxy contract for easy trading.\\n\\t\\tProxyRegistry proxyRegistry = ProxyRegistry(proxyRegistryAddress);\\n\\t\\tif (address(proxyRegistry.proxies(_owner)) == _operator) {\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\n\\t\\treturn ERC1155.isApprovedForAll(_owner, _operator);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns whether the specified token exists by checking to see if it has a creator\\n\\t * @param _id uint256 ID of the token to query the existence of\\n\\t * @return bool whether the token exists\\n\\t */\\n\\tfunction _exists(uint256 _id) internal view returns (bool) {\\n\\t\\treturn tokenSupply[_id] > 0;\\n\\t}\\n\\n\\tfunction exists(uint256 _id) external view returns (bool) {\\n\\t\\treturn _exists(_id);\\n\\t}\\n\\n\\t/**\\n\\t * This is used instead of msg.sender as transactions won't be sent by the original token owner, but by OpenSea.\\n\\t */\\n\\tfunction _msgSender() internal view override returns (address sender) {\\n\\t\\treturn ContextMixin.msgSender();\\n\\t}\\n}\\n\",\"keccak256\":\"0xca81647c8dc17218fb5f6423b8cc80644eab1123268d3f6f23c3231b4f20016b\",\"license\":\"MIT\"},\"contracts/NFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC1155Tradable.sol\\\";\\n\\n/**\\n * @title NFT\\n * NFT - a contract for non-fungible tokens using ERC 1155 for batch actions\\n */\\ncontract NFT is ERC1155Tradable {\\n\\t// Create a contract URI variable\\n\\tstring private _contractURI;\\n\\tuint256 public _price = 0.1 ether;\\n\\n\\tuint256 public constant MAX_TOKEN_COUNT = 10000;\\n\\n\\tevent PermanentURI(string _value, uint256 indexed _id);\\n\\n\\tconstructor(\\n\\t\\taddress _proxyRegistryAddress,\\n\\t\\tstring memory name,\\n\\t\\tstring memory symbol,\\n\\t\\tstring memory cURI,\\n\\t\\tstring memory tokenURI\\n\\t) ERC1155Tradable(name, symbol, tokenURI, _proxyRegistryAddress) {\\n\\t\\t_contractURI = cURI;\\n\\t}\\n\\n\\tfunction contractURI() public view returns (string memory) {\\n\\t\\treturn _contractURI;\\n\\t}\\n\\n\\tfunction setContractURI(string memory newuri) public onlyOwner {\\n\\t\\t_contractURI = newuri;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Mint a new token type and assigns _initialSupply to an address\\n\\t * @param initialOwner address of the first owner of the token\\n\\t * @param id The id of the token to create (must not currenty exist).\\n\\t * @param uri Optional URI for this token type\\n\\t * @param data Data to pass if receiver is contract\\n\\t * @return The newly created token ID\\n\\t */\\n\\tfunction mint(\\n\\t\\taddress initialOwner,\\n\\t\\tuint256 id,\\n\\t\\tstring memory uri,\\n\\t\\tbytes memory data\\n\\t) public onlyOwner returns (uint256) {\\n\\t\\trequire(!_exists(id), \\\"token id already exists\\\");\\n\\t\\trequire(id > 0 && id <= MAX_TOKEN_COUNT, \\\"token id out of bounds\\\");\\n\\n\\t\\tif (bytes(uri).length > 0) {\\n\\t\\t\\tcustomUri[id] = uri;\\n\\t\\t\\temit URI(uri, id);\\n\\t\\t}\\n\\n\\t\\t_mint(initialOwner, id, 1, data);\\n\\n\\t\\ttokenSupply[id] = 1;\\n\\n\\t\\treturn id;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Mint new tokens for each id in _ids\\n\\t * @param initialOwners          The addresses to mint tokens to\\n\\t * @param idsPerOwner            2d Array of ids to mint for each owner. Required to be the same length as initialOwners.\\n\\t * @param uri                    The Custom URI to set against each newly created Token\\n\\t * @param data                   Data to pass if receiver is contract\\n\\t */\\n\\tfunction batchMint(\\n\\t\\taddress[] memory initialOwners,\\n\\t\\tuint256[][] memory idsPerOwner,\\n\\t\\tstring memory uri,\\n\\t\\tbytes memory data\\n\\t) public onlyOwner {\\n\\t\\trequire(\\n\\t\\t\\tinitialOwners.length == idsPerOwner.length,\\n\\t\\t\\t\\\"NFT: initialOwners and idsPerOwner length mismatch\\\"\\n\\t\\t);\\n\\t\\tfor (uint256 i = 0; i < initialOwners.length; i++) {\\n\\t\\t\\taddress initialOwner = initialOwners[i];\\n\\t\\t\\tuint256[] memory ids = idsPerOwner[i];\\n\\t\\t\\tuint256[] memory quantities = new uint256[](ids.length); // https://fravoll.github.io/solidity-patterns/memory_array_building.html\\n\\t\\t\\tfor (uint256 j = 0; j < ids.length; j++) {\\n\\t\\t\\t\\tuint256 id = ids[j];\\n\\t\\t\\t\\trequire(!_exists(id), \\\"token id already exists\\\");\\n\\t\\t\\t\\trequire(\\n\\t\\t\\t\\t\\tid > 0 && id <= MAX_TOKEN_COUNT,\\n\\t\\t\\t\\t\\t\\\"token id out of bounds\\\"\\n\\t\\t\\t\\t);\\n\\t\\t\\t\\ttokenSupply[id] = 1;\\n\\t\\t\\t\\tquantities[j] = 1;\\n\\n\\t\\t\\t\\tif (bytes(uri).length > 0) {\\n\\t\\t\\t\\t\\tcustomUri[id] = uri;\\n\\t\\t\\t\\t\\temit URI(uri, id);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\t_mintBatch(initialOwner, ids, quantities, data);\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @dev Publicly accessible: Mint new tokens to the contract caller based on the amount of value sent.\\n\\t * Each token value is hard coded\\n\\t */\\n\\tfunction publicMint(uint256 count) public payable {\\n\\t\\trequire(msg.value == _price * count, \\\"NFT: invalid value\\\");\\n\\t\\trequire(count > 0, \\\"NFT: mint amount must be greater than 0\\\");\\n\\t\\taddress initialOwner = _msgSender();\\n\\t\\tif (count > 1) {\\n\\t\\t\\t// Batch Mint\\n\\t\\t\\tuint256[] memory ids = new uint256[](count);\\n\\t\\t\\tuint256[] memory quantities = new uint256[](count);\\n\\t\\t\\tfor (uint256 i = 0; i < count; i++) {\\n\\t\\t\\t\\tuint256 id = nextAvailableToken(); // No need to pass offset because setting totalSupply in the loop will prevent the same token return.\\n\\t\\t\\t\\trequire(id > 0, \\\"no more tokens\\\");\\n\\t\\t\\t\\trequire(!_exists(id), \\\"token id already exists\\\");\\n\\t\\t\\t\\tids[i] = id;\\n\\t\\t\\t\\tquantities[i] = 1;\\n\\t\\t\\t\\ttokenSupply[id] = 1;\\n\\t\\t\\t}\\n\\t\\t\\t_mintBatch(initialOwner, ids, quantities, \\\"\\\");\\n\\t\\t} else {\\n\\t\\t\\t// Single Mint\\n\\t\\t\\tuint256 id = nextAvailableToken();\\n\\t\\t\\trequire(id > 0, \\\"no more tokens\\\");\\n\\t\\t\\trequire(!_exists(id), \\\"token id already exists\\\");\\n\\n\\t\\t\\t_mint(initialOwner, id, 1, \\\"\\\");\\n\\n\\t\\t\\ttokenSupply[id] = 1;\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @dev Withdraw funds used to publicly mint tokens\\n\\t */\\n\\tfunction withdraw(address payable payee) public onlyOwner {\\n\\t\\t// send all Ether to payee\\n\\t\\t(bool sent, ) = payee.call{ value: address(this).balance }(\\\"\\\");\\n\\t\\trequire(sent, \\\"Failed to withdraw Ether\\\");\\n\\t}\\n\\n\\t/**\\n\\t\\tAllows contract owner to mass transfer to many recipients in a single transaction\\n\\t */\\n\\tfunction batchTransferToMany(\\n\\t\\taddress from,\\n\\t\\taddress[] memory recipients,\\n\\t\\tuint256[][] memory idsPerRecipient\\n\\t) public {\\n\\t\\tfor (uint256 i = 0; i < recipients.length; i++) {\\n\\t\\t\\taddress recipient = recipients[i];\\n\\t\\t\\tuint256[] memory ids = idsPerRecipient[i];\\n\\t\\t\\tuint256[] memory quantities = new uint256[](ids.length);\\n\\t\\t\\tfor (uint256 j = 0; j < ids.length; j++) {\\n\\t\\t\\t\\tuint256 quantity = balanceOf(from, ids[j]);\\n\\t\\t\\t\\tquantities[j] = quantity;\\n\\t\\t\\t}\\n\\t\\t\\tbytes memory data = \\\"\\\";\\n\\t\\t\\tsafeBatchTransferFrom(from, recipient, ids, quantities, data);\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t\\tMark a single token as permanent in batch\\n\\t */\\n\\tfunction makePermanent(uint256 id) public onlyOwner {\\n\\t\\trequire(_exists(id), \\\"token id does not exist\\\");\\n\\t\\tstring memory tokenURI = uri(id);\\n\\t\\temit PermanentURI(tokenURI, id);\\n\\t}\\n\\n\\t/**\\n\\t\\tMark all tokens permanent in batch\\n\\t */\\n\\tfunction batchMakePermanent(uint256[] memory ids) public {\\n\\t\\tfor (uint256 i = 0; i < ids.length; i++) {\\n\\t\\t\\tmakePermanent(ids[i]);\\n\\t\\t}\\n\\t}\\n\\n\\tfunction nextAvailableToken(uint256 offset)\\n\\t\\tinternal\\n\\t\\tview\\n\\t\\treturns (uint256)\\n\\t{\\n\\t\\tuint256 token;\\n\\t\\tfor (uint256 i = 1; i <= MAX_TOKEN_COUNT; i++) {\\n\\t\\t\\tif (tokenSupply[i] == 0) {\\n\\t\\t\\t\\tif (offset > 0) {\\n\\t\\t\\t\\t\\toffset = offset - 1;\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\ttoken = i;\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn token;\\n\\t}\\n\\n\\tfunction nextAvailableToken() internal view returns (uint256) {\\n\\t\\treturn nextAvailableToken(0);\\n\\t}\\n}\\n\",\"keccak256\":\"0x9a33b3d0a5a11f6644aebd8a3cba17af898f6873be21c0fa39d5c296591cd381\",\"license\":\"MIT\"},\"contracts/common/meta-transactions/ContentMixin.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nabstract contract ContextMixin {\\n\\tfunction msgSender() internal view returns (address payable sender) {\\n\\t\\tif (msg.sender == address(this)) {\\n\\t\\t\\tbytes memory array = msg.data;\\n\\t\\t\\tuint256 index = msg.data.length;\\n\\t\\t\\tassembly {\\n\\t\\t\\t\\t// Load the 32 bytes word from memory with the address on the lower 20 bytes, and mask those.\\n\\t\\t\\t\\tsender := and(\\n\\t\\t\\t\\t\\tmload(add(array, index)),\\n\\t\\t\\t\\t\\t0xffffffffffffffffffffffffffffffffffffffff\\n\\t\\t\\t\\t)\\n\\t\\t\\t}\\n\\t\\t} else {\\n\\t\\t\\tsender = payable(msg.sender);\\n\\t\\t}\\n\\t\\treturn sender;\\n\\t}\\n}\\n\",\"keccak256\":\"0x3903c58765e5dcf703340704c5b23523b10d0b90bb6b9f63c196ed55ef42e70e\",\"license\":\"MIT\"},\"contracts/common/meta-transactions/EIP712Base.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { Initializable } from \\\"./Initializable.sol\\\";\\n\\ncontract EIP712Base is Initializable {\\n\\tstruct EIP712Domain {\\n\\t\\tstring name;\\n\\t\\tstring version;\\n\\t\\taddress verifyingContract;\\n\\t\\tbytes32 salt;\\n\\t}\\n\\n\\tstring public constant ERC712_VERSION = \\\"1\\\";\\n\\n\\tbytes32 internal constant EIP712_DOMAIN_TYPEHASH =\\n\\t\\tkeccak256(\\n\\t\\t\\tbytes(\\n\\t\\t\\t\\t\\\"EIP712Domain(string name,string version,address verifyingContract,bytes32 salt)\\\"\\n\\t\\t\\t)\\n\\t\\t);\\n\\tbytes32 internal domainSeperator;\\n\\n\\t// supposed to be called once while initializing.\\n\\t// one of the contracts that inherits this contract follows proxy pattern\\n\\t// so it is not possible to do this in a constructor\\n\\tfunction _initializeEIP712(string memory name) internal initializer {\\n\\t\\t_setDomainSeperator(name);\\n\\t}\\n\\n\\tfunction _setDomainSeperator(string memory name) internal {\\n\\t\\tdomainSeperator = keccak256(\\n\\t\\t\\tabi.encode(\\n\\t\\t\\t\\tEIP712_DOMAIN_TYPEHASH,\\n\\t\\t\\t\\tkeccak256(bytes(name)),\\n\\t\\t\\t\\tkeccak256(bytes(ERC712_VERSION)),\\n\\t\\t\\t\\taddress(this),\\n\\t\\t\\t\\tbytes32(getChainId())\\n\\t\\t\\t)\\n\\t\\t);\\n\\t}\\n\\n\\tfunction getDomainSeperator() public view returns (bytes32) {\\n\\t\\treturn domainSeperator;\\n\\t}\\n\\n\\tfunction getChainId() public view returns (uint256) {\\n\\t\\tuint256 id;\\n\\t\\tassembly {\\n\\t\\t\\tid := chainid()\\n\\t\\t}\\n\\t\\treturn id;\\n\\t}\\n\\n\\t/**\\n\\t * Accept message hash and returns hash message in EIP712 compatible form\\n\\t * So that it can be used to recover signer from signature signed using EIP712 formatted data\\n\\t * https://eips.ethereum.org/EIPS/eip-712\\n\\t * \\\"\\\\\\\\x19\\\" makes the encoding deterministic\\n\\t * \\\"\\\\\\\\x01\\\" is the version byte to make it compatible to EIP-191\\n\\t */\\n\\tfunction toTypedMessageHash(bytes32 messageHash)\\n\\t\\tinternal\\n\\t\\tview\\n\\t\\treturns (bytes32)\\n\\t{\\n\\t\\treturn\\n\\t\\t\\tkeccak256(\\n\\t\\t\\t\\tabi.encodePacked(\\\"\\\\x19\\\\x01\\\", getDomainSeperator(), messageHash)\\n\\t\\t\\t);\\n\\t}\\n}\\n\",\"keccak256\":\"0xc02dad933e0b587d494b54009899e4387df9b39047bb51d72b4ddd8a133acde5\",\"license\":\"MIT\"},\"contracts/common/meta-transactions/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ncontract Initializable {\\n\\tbool inited = false;\\n\\n\\tmodifier initializer() {\\n\\t\\trequire(!inited, \\\"already inited\\\");\\n\\t\\t_;\\n\\t\\tinited = true;\\n\\t}\\n}\\n\",\"keccak256\":\"0x91fa455cfa5df78964476f11e413e12b4b3bde0c1a0a2f368585fa9419737505\",\"license\":\"MIT\"},\"contracts/common/meta-transactions/NativeMetaTransaction.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { SafeMath } from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport { EIP712Base } from \\\"./EIP712Base.sol\\\";\\n\\ncontract NativeMetaTransaction is EIP712Base {\\n\\tusing SafeMath for uint256;\\n\\tbytes32 private constant META_TRANSACTION_TYPEHASH =\\n\\t\\tkeccak256(\\n\\t\\t\\tbytes(\\n\\t\\t\\t\\t\\\"MetaTransaction(uint256 nonce,address from,bytes functionSignature)\\\"\\n\\t\\t\\t)\\n\\t\\t);\\n\\tevent MetaTransactionExecuted(\\n\\t\\taddress userAddress,\\n\\t\\taddress payable relayerAddress,\\n\\t\\tbytes functionSignature\\n\\t);\\n\\tmapping(address => uint256) nonces;\\n\\n\\t/*\\n\\t * Meta transaction structure.\\n\\t * No point of including value field here as if user is doing value transfer then he has the funds to pay for gas\\n\\t * He should call the desired function directly in that case.\\n\\t */\\n\\tstruct MetaTransaction {\\n\\t\\tuint256 nonce;\\n\\t\\taddress from;\\n\\t\\tbytes functionSignature;\\n\\t}\\n\\n\\tfunction executeMetaTransaction(\\n\\t\\taddress userAddress,\\n\\t\\tbytes memory functionSignature,\\n\\t\\tbytes32 sigR,\\n\\t\\tbytes32 sigS,\\n\\t\\tuint8 sigV\\n\\t) public payable returns (bytes memory) {\\n\\t\\tMetaTransaction memory metaTx = MetaTransaction({\\n\\t\\t\\tnonce: nonces[userAddress],\\n\\t\\t\\tfrom: userAddress,\\n\\t\\t\\tfunctionSignature: functionSignature\\n\\t\\t});\\n\\n\\t\\trequire(\\n\\t\\t\\tverify(userAddress, metaTx, sigR, sigS, sigV),\\n\\t\\t\\t\\\"Signer and signature do not match\\\"\\n\\t\\t);\\n\\n\\t\\t// increase nonce for user (to avoid re-use)\\n\\t\\tnonces[userAddress] = nonces[userAddress].add(1);\\n\\n\\t\\temit MetaTransactionExecuted(\\n\\t\\t\\tuserAddress,\\n\\t\\t\\tpayable(msg.sender),\\n\\t\\t\\tfunctionSignature\\n\\t\\t);\\n\\n\\t\\t// Append userAddress and relayer address at the end to extract it from calling context\\n\\t\\t(bool success, bytes memory returnData) = address(this).call(\\n\\t\\t\\tabi.encodePacked(functionSignature, userAddress)\\n\\t\\t);\\n\\t\\trequire(success, \\\"Function call not successful\\\");\\n\\n\\t\\treturn returnData;\\n\\t}\\n\\n\\tfunction hashMetaTransaction(MetaTransaction memory metaTx)\\n\\t\\tinternal\\n\\t\\tpure\\n\\t\\treturns (bytes32)\\n\\t{\\n\\t\\treturn\\n\\t\\t\\tkeccak256(\\n\\t\\t\\t\\tabi.encode(\\n\\t\\t\\t\\t\\tMETA_TRANSACTION_TYPEHASH,\\n\\t\\t\\t\\t\\tmetaTx.nonce,\\n\\t\\t\\t\\t\\tmetaTx.from,\\n\\t\\t\\t\\t\\tkeccak256(metaTx.functionSignature)\\n\\t\\t\\t\\t)\\n\\t\\t\\t);\\n\\t}\\n\\n\\tfunction getNonce(address user) public view returns (uint256 nonce) {\\n\\t\\tnonce = nonces[user];\\n\\t}\\n\\n\\tfunction verify(\\n\\t\\taddress signer,\\n\\t\\tMetaTransaction memory metaTx,\\n\\t\\tbytes32 sigR,\\n\\t\\tbytes32 sigS,\\n\\t\\tuint8 sigV\\n\\t) internal view returns (bool) {\\n\\t\\trequire(signer != address(0), \\\"NativeMetaTransaction: INVALID_SIGNER\\\");\\n\\t\\treturn\\n\\t\\t\\tsigner ==\\n\\t\\t\\tecrecover(\\n\\t\\t\\t\\ttoTypedMessageHash(hashMetaTransaction(metaTx)),\\n\\t\\t\\t\\tsigV,\\n\\t\\t\\t\\tsigR,\\n\\t\\t\\t\\tsigS\\n\\t\\t\\t);\\n\\t}\\n}\\n\",\"keccak256\":\"0xd0e99c3f9e92d054c7dbc7b5947d5ec4b91edc189f984d0078ff00e751970946\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106101f85760003560e01c80634f558e791161010d578063bd85b039116100a0578063d2b04fd61161006f578063d2b04fd61461073a578063e8a3d48514610777578063e985e9c5146107a2578063f242432a146107df578063f2fde38b14610808576101f8565b8063bd85b03914610680578063c00cdae9146106bd578063ce31cd56146106e6578063d0bbb0d71461070f576101f8565b80638da5cb5b116100dc5780638da5cb5b146105d8578063938e3d7b1461060357806395d89b411461062c578063a22cb46514610657576101f8565b80634f558e791461053257806351cff8d91461056f578063715018a6146105985780637adbaa02146105af576101f8565b8063235b6ea1116101905780632e24afb01161015f5780632e24afb01461044f5780632eb2c2d6146104785780633408e470146104a15780633adf80b4146104cc5780634e1273f4146104f5576101f8565b8063235b6ea11461038e5780632693ebf2146103b95780632d0335ab146103f65780632db1154414610433576101f8565b80630c53c51c116101cc5780630c53c51c146102cb5780630e89341c146102fb5780630f7e59701461033857806320379ee514610363576101f8565b8062fdd58e146101fd57806301ffc9a71461023a57806302fe53051461027757806306fdde03146102a0575b600080fd5b34801561020957600080fd5b50610224600480360381019061021f91906142fd565b610831565b60405161023191906151f9565b60405180910390f35b34801561024657600080fd5b50610261600480360381019061025c919061453c565b6108fa565b60405161026e9190614dd5565b60405180910390f35b34801561028357600080fd5b5061029e600480360381019061029991906145b7565b6109dc565b005b3480156102ac57600080fd5b506102b5610a64565b6040516102c29190614eb7565b60405180910390f35b6102e560048036038101906102e0919061426e565b610af2565b6040516102f29190614e95565b60405180910390f35b34801561030757600080fd5b50610322600480360381019061031d91906145f8565b610d64565b60405161032f9190614eb7565b60405180910390f35b34801561034457600080fd5b5061034d610f0e565b60405161035a9190614eb7565b60405180910390f35b34801561036f57600080fd5b50610378610f47565b6040516103859190614df0565b60405180910390f35b34801561039a57600080fd5b506103a3610f51565b6040516103b091906151f9565b60405180910390f35b3480156103c557600080fd5b506103e060048036038101906103db91906145f8565b610f57565b6040516103ed91906151f9565b60405180910390f35b34801561040257600080fd5b5061041d60048036038101906104189190613fd7565b610f6f565b60405161042a91906151f9565b60405180910390f35b61044d600480360381019061044891906145f8565b610fb8565b005b34801561045b57600080fd5b50610476600480360381019061047191906145f8565b611398565b005b34801561048457600080fd5b5061049f600480360381019061049a9190614065565b6114a5565b005b3480156104ad57600080fd5b506104b6611546565b6040516104c391906151f9565b60405180910390f35b3480156104d857600080fd5b506104f360048036038101906104ee9190614621565b611553565b005b34801561050157600080fd5b5061051c6004803603810190610517919061448f565b611633565b6040516105299190614d7c565b60405180910390f35b34801561053e57600080fd5b50610559600480360381019061055491906145f8565b6117e4565b6040516105669190614dd5565b60405180910390f35b34801561057b57600080fd5b5061059660048036038101906105919190614000565b6117f6565b005b3480156105a457600080fd5b506105ad611922565b005b3480156105bb57600080fd5b506105d660048036038101906105d191906144fb565b6119aa565b005b3480156105e457600080fd5b506105ed611a16565b6040516105fa9190614c61565b60405180910390f35b34801561060f57600080fd5b5061062a600480360381019061062591906145b7565b611a40565b005b34801561063857600080fd5b50610641611ad6565b60405161064e9190614eb7565b60405180910390f35b34801561066357600080fd5b5061067e60048036038101906106799190614232565b611b64565b005b34801561068c57600080fd5b506106a760048036038101906106a291906145f8565b611b7a565b6040516106b491906151f9565b60405180910390f35b3480156106c957600080fd5b506106e460048036038101906106df91906141b3565b611b97565b005b3480156106f257600080fd5b5061070d600480360381019061070891906143cc565b611d94565b005b34801561071b57600080fd5b50610724612152565b60405161073191906151f9565b60405180910390f35b34801561074657600080fd5b50610761600480360381019061075c9190614339565b612158565b60405161076e91906151f9565b60405180910390f35b34801561078357600080fd5b5061078c61230c565b6040516107999190614eb7565b60405180910390f35b3480156107ae57600080fd5b506107c960048036038101906107c49190614029565b61239e565b6040516107d69190614dd5565b60405180910390f35b3480156107eb57600080fd5b5061080660048036038101906108019190614124565b6124a0565b005b34801561081457600080fd5b5061082f600480360381019061082a9190613fd7565b612541565b005b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156108a2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161089990614f19565b60405180910390fd5b60008083815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b60007fd9b67a26000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806109c557507f0e89341c000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806109d557506109d4826126ea565b5b9050919050565b6109e4612754565b73ffffffffffffffffffffffffffffffffffffffff16610a02611a16565b73ffffffffffffffffffffffffffffffffffffffff1614610a58576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a4f90615099565b60405180910390fd5b610a6181612763565b50565b600a8054610a71906155a4565b80601f0160208091040260200160405190810160405280929190818152602001828054610a9d906155a4565b8015610aea5780601f10610abf57610100808354040283529160200191610aea565b820191906000526020600020905b815481529060010190602001808311610acd57829003601f168201915b505050505081565b606060006040518060600160405280600560008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205481526020018873ffffffffffffffffffffffffffffffffffffffff168152602001878152509050610b75878287878761277d565b610bb4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bab906150b9565b60405180910390fd5b610c076001600560008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461288690919063ffffffff16565b600560008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055507f5845892132946850460bff5a0083f71031bc5bf9aadcd40f1de79423eac9b10b873388604051610c7d93929190614c7c565b60405180910390a16000803073ffffffffffffffffffffffffffffffffffffffff16888a604051602001610cb2929190614bed565b604051602081830303815290604052604051610cce9190614bd6565b6000604051808303816000865af19150503d8060008114610d0b576040519150601f19603f3d011682016040523d82523d6000602084013e610d10565b606091505b509150915081610d55576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d4c90614f59565b60405180910390fd5b80935050505095945050505050565b6060610d6f8261289c565b610dae576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610da590615039565b60405180910390fd5b6000600960008481526020019081526020016000208054610dce906155a4565b80601f0160208091040260200160405190810160405280929190818152602001828054610dfa906155a4565b8015610e475780601f10610e1c57610100808354040283529160200191610e47565b820191906000526020600020905b815481529060010190602001808311610e2a57829003601f168201915b50505050509050600081511115610efc57600960008481526020019081526020016000208054610e76906155a4565b80601f0160208091040260200160405190810160405280929190818152602001828054610ea2906155a4565b8015610eef5780601f10610ec457610100808354040283529160200191610eef565b820191906000526020600020905b815481529060010190602001808311610ed257829003601f168201915b5050505050915050610f09565b610f05836128bb565b9150505b919050565b6040518060400160405280600181526020017f310000000000000000000000000000000000000000000000000000000000000081525081565b6000600454905090565b600d5481565b60086020528060005260406000206000915090505481565b6000600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b80600d54610fc69190615425565b3414611007576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ffe90614fb9565b60405180910390fd5b6000811161104a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161104190614f79565b60405180910390fd5b6000611054612754565b905060018211156112c55760008267ffffffffffffffff8111156110a1577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156110cf5781602001602082028036833780820191505090505b50905060008367ffffffffffffffff811115611114577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156111425781602001602082028036833780820191505090505b50905060005b848110156112a257600061115a61294f565b90506000811161119f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611196906150f9565b60405180910390fd5b6111a88161289c565b156111e8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111df90615159565b60405180910390fd5b80848381518110611222577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010181815250506001838381518110611269577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010181815250506001600860008381526020019081526020016000208190555050808061129a90615607565b915050611148565b506112be83838360405180602001604052806000815250612960565b5050611394565b60006112cf61294f565b905060008111611314576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161130b906150f9565b60405180910390fd5b61131d8161289c565b1561135d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161135490615159565b60405180910390fd5b6113798282600160405180602001604052806000815250612bca565b60016008600083815260200190815260200160002081905550505b5050565b6113a0612754565b73ffffffffffffffffffffffffffffffffffffffff166113be611a16565b73ffffffffffffffffffffffffffffffffffffffff1614611414576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161140b90615099565b60405180910390fd5b61141d8161289c565b61145c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161145390615079565b60405180910390fd5b600061146782610d64565b9050817fa109ba539900bf1b633f956d63c96fc89b814c7287f7aa50a9216d0b55657207826040516114999190614eb7565b60405180910390a25050565b6114ad612754565b73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614806114f357506114f2856114ed612754565b61239e565b5b611532576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161152990615019565b60405180910390fd5b61153f8585858585612d60565b5050505050565b6000804690508091505090565b61155b612754565b73ffffffffffffffffffffffffffffffffffffffff16611579611a16565b73ffffffffffffffffffffffffffffffffffffffff16146115cf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115c690615099565b60405180910390fd5b806009600084815260200190815260200160002090805190602001906115f6929190613bcb565b50817f6bb7ff708619ba0610cba295a58592e0451dee2622938c8755667688daf3529b826040516116279190614eb7565b60405180910390a25050565b60608151835114611679576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161167090615199565b60405180910390fd5b6000835167ffffffffffffffff8111156116bc577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156116ea5781602001602082028036833780820191505090505b50905060005b84518110156117d957611783858281518110611735577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151858381518110611776577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151610831565b8282815181106117bc577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001018181525050806117d290615607565b90506116f0565b508091505092915050565b60006117ef8261289c565b9050919050565b6117fe612754565b73ffffffffffffffffffffffffffffffffffffffff1661181c611a16565b73ffffffffffffffffffffffffffffffffffffffff1614611872576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161186990615099565b60405180910390fd5b60008173ffffffffffffffffffffffffffffffffffffffff164760405161189890614c4c565b60006040518083038185875af1925050503d80600081146118d5576040519150601f19603f3d011682016040523d82523d6000602084013e6118da565b606091505b505090508061191e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611915906150d9565b60405180910390fd5b5050565b61192a612754565b73ffffffffffffffffffffffffffffffffffffffff16611948611a16565b73ffffffffffffffffffffffffffffffffffffffff161461199e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161199590615099565b60405180910390fd5b6119a860006130c0565b565b60005b8151811015611a12576119ff8282815181106119f2577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151611398565b8080611a0a90615607565b9150506119ad565b5050565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b611a48612754565b73ffffffffffffffffffffffffffffffffffffffff16611a66611a16565b73ffffffffffffffffffffffffffffffffffffffff1614611abc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ab390615099565b60405180910390fd5b80600c9080519060200190611ad2929190613bcb565b5050565b600b8054611ae3906155a4565b80601f0160208091040260200160405190810160405280929190818152602001828054611b0f906155a4565b8015611b5c5780601f10611b3157610100808354040283529160200191611b5c565b820191906000526020600020905b815481529060010190602001808311611b3f57829003601f168201915b505050505081565b611b76611b6f612754565b8383613186565b5050565b600060086000838152602001908152602001600020549050919050565b60005b8251811015611d8e576000838281518110611bde577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015190506000838381518110611c23577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015190506000815167ffffffffffffffff811115611c70577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051908082528060200260200182016040528015611c9e5781602001602082028036833780820191505090505b50905060005b8251811015611d55576000611cf989858481518110611cec577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151610831565b905080838381518110611d35577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001018181525050508080611d4d90615607565b915050611ca4565b506000604051806020016040528060008152509050611d7788858585856114a5565b505050508080611d8690615607565b915050611b9a565b50505050565b611d9c612754565b73ffffffffffffffffffffffffffffffffffffffff16611dba611a16565b73ffffffffffffffffffffffffffffffffffffffff1614611e10576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e0790615099565b60405180910390fd5b8251845114611e54576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e4b90615119565b60405180910390fd5b60005b845181101561214b576000858281518110611e9b577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015190506000858381518110611ee0577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015190506000815167ffffffffffffffff811115611f2d577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051908082528060200260200182016040528015611f5b5781602001602082028036833780820191505090505b50905060005b8251811015612128576000838281518110611fa5577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101519050611fb88161289c565b15611ff8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fef90615159565b60405180910390fd5b60008111801561200a57506127108111155b612049576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161204090615139565b60405180910390fd5b60016008600083815260200190815260200160002081905550600183838151811061209d577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101818152505060008851111561211457876009600083815260200190815260200160002090805190602001906120da929190613bcb565b50807f6bb7ff708619ba0610cba295a58592e0451dee2622938c8755667688daf3529b8960405161210b9190614eb7565b60405180910390a25b50808061212090615607565b915050611f61565b5061213583838388612960565b505050808061214390615607565b915050611e57565b5050505050565b61271081565b6000612162612754565b73ffffffffffffffffffffffffffffffffffffffff16612180611a16565b73ffffffffffffffffffffffffffffffffffffffff16146121d6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121cd90615099565b60405180910390fd5b6121df8461289c565b1561221f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161221690615159565b60405180910390fd5b60008411801561223157506127108411155b612270576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161226790615139565b60405180910390fd5b6000835111156122db57826009600086815260200190815260200160002090805190602001906122a1929190613bcb565b50837f6bb7ff708619ba0610cba295a58592e0451dee2622938c8755667688daf3529b846040516122d29190614eb7565b60405180910390a25b6122e88585600185612bca565b60016008600086815260200190815260200160002081905550839050949350505050565b6060600c805461231b906155a4565b80601f0160208091040260200160405190810160405280929190818152602001828054612347906155a4565b80156123945780601f1061236957610100808354040283529160200191612394565b820191906000526020600020905b81548152906001019060200180831161237757829003601f168201915b5050505050905090565b600080600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1663c4552791866040518263ffffffff1660e01b81526004016124169190614c61565b60206040518083038186803b15801561242e57600080fd5b505afa158015612442573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612466919061458e565b73ffffffffffffffffffffffffffffffffffffffff16141561248c57600191505061249a565b61249684846132f3565b9150505b92915050565b6124a8612754565b73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614806124ee57506124ed856124e8612754565b61239e565b5b61252d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161252490614f99565b60405180910390fd5b61253a8585858585613387565b5050505050565b612549612754565b73ffffffffffffffffffffffffffffffffffffffff16612567611a16565b73ffffffffffffffffffffffffffffffffffffffff16146125bd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125b490615099565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561262d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161262490614f39565b60405180910390fd5b612636816130c0565b50565b60003073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614156126e357600080368080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509050600080369050905073ffffffffffffffffffffffffffffffffffffffff8183015116925050506126e7565b3390505b90565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b600061275e612639565b905090565b8060029080519060200190612779929190613bcb565b5050565b60008073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff1614156127ee576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016127e590614fd9565b60405180910390fd5b60016128016127fc87613609565b613671565b838686604051600081526020016040526040516128219493929190614e50565b6020604051602081039080840390855afa158015612843573d6000803e3d6000fd5b5050506020604051035173ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff1614905095945050505050565b6000818361289491906153cf565b905092915050565b6000806008600084815260200190815260200160002054119050919050565b6060600280546128ca906155a4565b80601f01602080910402602001604051908101604052809291908181526020018280546128f6906155a4565b80156129435780601f1061291857610100808354040283529160200191612943565b820191906000526020600020905b81548152906001019060200180831161292657829003601f168201915b50505050509050919050565b600061295b60006136aa565b905090565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614156129d0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016129c7906151d9565b60405180910390fd5b8151835114612a14576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a0b906151b9565b60405180910390fd5b6000612a1e612754565b9050612a2f8160008787878761371c565b60005b8451811015612b3457838181518110612a74577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151600080878481518110612ab8577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254612b1a91906153cf565b925050819055508080612b2c90615607565b915050612a32565b508473ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051612bac929190614d9e565b60405180910390a4612bc381600087878787613724565b5050505050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415612c3a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612c31906151d9565b60405180910390fd5b6000612c44612754565b9050612c6581600087612c568861390b565b612c5f8861390b565b8761371c565b8260008086815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254612cc491906153cf565b925050819055508473ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f628787604051612d42929190615214565b60405180910390a4612d59816000878787876139d1565b5050505050565b8151835114612da4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612d9b906151b9565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415612e14576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612e0b90614ff9565b60405180910390fd5b6000612e1e612754565b9050612e2e81878787878761371c565b60005b845181101561302b576000858281518110612e75577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015190506000858381518110612eba577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101519050600080600084815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015612f5b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612f5290615059565b60405180910390fd5b81810360008085815260200190815260200160002060008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508160008085815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461301091906153cf565b925050819055505050508061302490615607565b9050612e31565b508473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb87876040516130a2929190614d9e565b60405180910390a46130b8818787878787613724565b505050505050565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156131f5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016131ec90615179565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516132e69190614dd5565b60405180910390a3505050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614156133f7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016133ee90614ff9565b60405180910390fd5b6000613401612754565b90506134218187876134128861390b565b61341b8861390b565b8761371c565b600080600086815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050838110156134b8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016134af90615059565b60405180910390fd5b83810360008087815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508360008087815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461356d91906153cf565b925050819055508573ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f6288886040516135ea929190615214565b60405180910390a46136008288888888886139d1565b50505050505050565b6000604051806080016040528060438152602001615f5a6043913980519060200120826000015183602001518460400151805190602001206040516020016136549493929190614e0b565b604051602081830303815290604052805190602001209050919050565b600061367b610f47565b8260405160200161368d929190614c15565b604051602081830303815290604052805190602001209050919050565b6000806000600190505b6127108111613712576000600860008381526020019081526020016000205414156136ff5760008411156136f6576001846136ef919061547f565b93506136fe565b809150613712565b5b808061370a90615607565b9150506136b4565b5080915050919050565b505050505050565b6137438473ffffffffffffffffffffffffffffffffffffffff16613bb8565b15613903578373ffffffffffffffffffffffffffffffffffffffff1663bc197c8187878686866040518663ffffffff1660e01b8152600401613789959493929190614cba565b602060405180830381600087803b1580156137a357600080fd5b505af19250505080156137d457506040513d601f19601f820116820180604052508101906137d19190614565565b60015b61387a576137e061570b565b806308c379a0141561383d57506137f5615e0b565b80613800575061383f565b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016138349190614eb7565b60405180910390fd5b505b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161387190614ed9565b60405180910390fd5b63bc197c8160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614613901576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016138f890614ef9565b60405180910390fd5b505b505050505050565b60606000600167ffffffffffffffff811115613950577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405190808252806020026020018201604052801561397e5781602001602082028036833780820191505090505b50905082816000815181106139bc577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101818152505080915050919050565b6139f08473ffffffffffffffffffffffffffffffffffffffff16613bb8565b15613bb0578373ffffffffffffffffffffffffffffffffffffffff1663f23a6e6187878686866040518663ffffffff1660e01b8152600401613a36959493929190614d22565b602060405180830381600087803b158015613a5057600080fd5b505af1925050508015613a8157506040513d601f19601f82011682018060405250810190613a7e9190614565565b60015b613b2757613a8d61570b565b806308c379a01415613aea5750613aa2615e0b565b80613aad5750613aec565b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613ae19190614eb7565b60405180910390fd5b505b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613b1e90614ed9565b60405180910390fd5b63f23a6e6160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614613bae576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613ba590614ef9565b60405180910390fd5b505b505050505050565b600080823b905060008111915050919050565b828054613bd7906155a4565b90600052602060002090601f016020900481019282613bf95760008555613c40565b82601f10613c1257805160ff1916838001178555613c40565b82800160010185558215613c40579182015b82811115613c3f578251825591602001919060010190613c24565b5b509050613c4d9190613c51565b5090565b5b80821115613c6a576000816000905550600101613c52565b5090565b6000613c81613c7c84615262565b61523d565b90508083825260208201905082856020860282011115613ca057600080fd5b60005b85811015613cd05781613cb68882613e48565b845260208401935060208301925050600181019050613ca3565b5050509392505050565b6000613ced613ce88461528e565b61523d565b90508083825260208201905082856020860282011115613d0c57600080fd5b60005b85811015613d5657813567ffffffffffffffff811115613d2e57600080fd5b808601613d3b8982613ec6565b85526020850194506020840193505050600181019050613d0f565b5050509392505050565b6000613d73613d6e846152ba565b61523d565b90508083825260208201905082856020860282011115613d9257600080fd5b60005b85811015613dc25781613da88882613fad565b845260208401935060208301925050600181019050613d95565b5050509392505050565b6000613ddf613dda846152e6565b61523d565b905082815260208101848484011115613df757600080fd5b613e02848285615562565b509392505050565b6000613e1d613e1884615317565b61523d565b905082815260208101848484011115613e3557600080fd5b613e40848285615562565b509392505050565b600081359050613e5781615ea1565b92915050565b600081359050613e6c81615eb8565b92915050565b600082601f830112613e8357600080fd5b8135613e93848260208601613c6e565b91505092915050565b600082601f830112613ead57600080fd5b8135613ebd848260208601613cda565b91505092915050565b600082601f830112613ed757600080fd5b8135613ee7848260208601613d60565b91505092915050565b600081359050613eff81615ecf565b92915050565b600081359050613f1481615ee6565b92915050565b600081359050613f2981615efd565b92915050565b600081519050613f3e81615efd565b92915050565b600082601f830112613f5557600080fd5b8135613f65848260208601613dcc565b91505092915050565b600081519050613f7d81615f14565b92915050565b600082601f830112613f9457600080fd5b8135613fa4848260208601613e0a565b91505092915050565b600081359050613fbc81615f2b565b92915050565b600081359050613fd181615f42565b92915050565b600060208284031215613fe957600080fd5b6000613ff784828501613e48565b91505092915050565b60006020828403121561401257600080fd5b600061402084828501613e5d565b91505092915050565b6000806040838503121561403c57600080fd5b600061404a85828601613e48565b925050602061405b85828601613e48565b9150509250929050565b600080600080600060a0868803121561407d57600080fd5b600061408b88828901613e48565b955050602061409c88828901613e48565b945050604086013567ffffffffffffffff8111156140b957600080fd5b6140c588828901613ec6565b935050606086013567ffffffffffffffff8111156140e257600080fd5b6140ee88828901613ec6565b925050608086013567ffffffffffffffff81111561410b57600080fd5b61411788828901613f44565b9150509295509295909350565b600080600080600060a0868803121561413c57600080fd5b600061414a88828901613e48565b955050602061415b88828901613e48565b945050604061416c88828901613fad565b935050606061417d88828901613fad565b925050608086013567ffffffffffffffff81111561419a57600080fd5b6141a688828901613f44565b9150509295509295909350565b6000806000606084860312156141c857600080fd5b60006141d686828701613e48565b935050602084013567ffffffffffffffff8111156141f357600080fd5b6141ff86828701613e72565b925050604084013567ffffffffffffffff81111561421c57600080fd5b61422886828701613e9c565b9150509250925092565b6000806040838503121561424557600080fd5b600061425385828601613e48565b925050602061426485828601613ef0565b9150509250929050565b600080600080600060a0868803121561428657600080fd5b600061429488828901613e48565b955050602086013567ffffffffffffffff8111156142b157600080fd5b6142bd88828901613f44565b94505060406142ce88828901613f05565b93505060606142df88828901613f05565b92505060806142f088828901613fc2565b9150509295509295909350565b6000806040838503121561431057600080fd5b600061431e85828601613e48565b925050602061432f85828601613fad565b9150509250929050565b6000806000806080858703121561434f57600080fd5b600061435d87828801613e48565b945050602061436e87828801613fad565b935050604085013567ffffffffffffffff81111561438b57600080fd5b61439787828801613f83565b925050606085013567ffffffffffffffff8111156143b457600080fd5b6143c087828801613f44565b91505092959194509250565b600080600080608085870312156143e257600080fd5b600085013567ffffffffffffffff8111156143fc57600080fd5b61440887828801613e72565b945050602085013567ffffffffffffffff81111561442557600080fd5b61443187828801613e9c565b935050604085013567ffffffffffffffff81111561444e57600080fd5b61445a87828801613f83565b925050606085013567ffffffffffffffff81111561447757600080fd5b61448387828801613f44565b91505092959194509250565b600080604083850312156144a257600080fd5b600083013567ffffffffffffffff8111156144bc57600080fd5b6144c885828601613e72565b925050602083013567ffffffffffffffff8111156144e557600080fd5b6144f185828601613ec6565b9150509250929050565b60006020828403121561450d57600080fd5b600082013567ffffffffffffffff81111561452757600080fd5b61453384828501613ec6565b91505092915050565b60006020828403121561454e57600080fd5b600061455c84828501613f1a565b91505092915050565b60006020828403121561457757600080fd5b600061458584828501613f2f565b91505092915050565b6000602082840312156145a057600080fd5b60006145ae84828501613f6e565b91505092915050565b6000602082840312156145c957600080fd5b600082013567ffffffffffffffff8111156145e357600080fd5b6145ef84828501613f83565b91505092915050565b60006020828403121561460a57600080fd5b600061461884828501613fad565b91505092915050565b6000806040838503121561463457600080fd5b600061464285828601613fad565b925050602083013567ffffffffffffffff81111561465f57600080fd5b61466b85828601613f83565b9150509250929050565b60006146818383614ba9565b60208301905092915050565b614696816154c5565b82525050565b6146a5816154b3565b82525050565b6146bc6146b7826154b3565b615650565b82525050565b60006146cd82615358565b6146d78185615386565b93506146e283615348565b8060005b838110156147135781516146fa8882614675565b975061470583615379565b9250506001810190506146e6565b5085935050505092915050565b614729816154d7565b82525050565b614738816154e3565b82525050565b61474f61474a826154e3565b615662565b82525050565b600061476082615363565b61476a8185615397565b935061477a818560208601615571565b6147838161572d565b840191505092915050565b600061479982615363565b6147a381856153a8565b93506147b3818560208601615571565b80840191505092915050565b60006147ca8261536e565b6147d481856153b3565b93506147e4818560208601615571565b6147ed8161572d565b840191505092915050565b60006148056034836153b3565b915061481082615758565b604082019050919050565b60006148286028836153b3565b9150614833826157a7565b604082019050919050565b600061484b602b836153b3565b9150614856826157f6565b604082019050919050565b600061486e6026836153b3565b915061487982615845565b604082019050919050565b6000614891601c836153b3565b915061489c82615894565b602082019050919050565b60006148b46027836153b3565b91506148bf826158bd565b604082019050919050565b60006148d76002836153c4565b91506148e28261590c565b600282019050919050565b60006148fa6029836153b3565b915061490582615935565b604082019050919050565b600061491d6012836153b3565b915061492882615984565b602082019050919050565b60006149406025836153b3565b915061494b826159ad565b604082019050919050565b60006149636025836153b3565b915061496e826159fc565b604082019050919050565b60006149866032836153b3565b915061499182615a4b565b604082019050919050565b60006149a96026836153b3565b91506149b482615a9a565b604082019050919050565b60006149cc602a836153b3565b91506149d782615ae9565b604082019050919050565b60006149ef6017836153b3565b91506149fa82615b38565b602082019050919050565b6000614a126020836153b3565b9150614a1d82615b61565b602082019050919050565b6000614a356021836153b3565b9150614a4082615b8a565b604082019050919050565b6000614a586018836153b3565b9150614a6382615bd9565b602082019050919050565b6000614a7b600e836153b3565b9150614a8682615c02565b602082019050919050565b6000614a9e6000836153a8565b9150614aa982615c2b565b600082019050919050565b6000614ac16032836153b3565b9150614acc82615c2e565b604082019050919050565b6000614ae46016836153b3565b9150614aef82615c7d565b602082019050919050565b6000614b076017836153b3565b9150614b1282615ca6565b602082019050919050565b6000614b2a6029836153b3565b9150614b3582615ccf565b604082019050919050565b6000614b4d6029836153b3565b9150614b5882615d1e565b604082019050919050565b6000614b706028836153b3565b9150614b7b82615d6d565b604082019050919050565b6000614b936021836153b3565b9150614b9e82615dbc565b604082019050919050565b614bb28161554b565b82525050565b614bc18161554b565b82525050565b614bd081615555565b82525050565b6000614be2828461478e565b915081905092915050565b6000614bf9828561478e565b9150614c0582846146ab565b6014820191508190509392505050565b6000614c20826148ca565b9150614c2c828561473e565b602082019150614c3c828461473e565b6020820191508190509392505050565b6000614c5782614a91565b9150819050919050565b6000602082019050614c76600083018461469c565b92915050565b6000606082019050614c91600083018661469c565b614c9e602083018561468d565b8181036040830152614cb08184614755565b9050949350505050565b600060a082019050614ccf600083018861469c565b614cdc602083018761469c565b8181036040830152614cee81866146c2565b90508181036060830152614d0281856146c2565b90508181036080830152614d168184614755565b90509695505050505050565b600060a082019050614d37600083018861469c565b614d44602083018761469c565b614d516040830186614bb8565b614d5e6060830185614bb8565b8181036080830152614d708184614755565b90509695505050505050565b60006020820190508181036000830152614d9681846146c2565b905092915050565b60006040820190508181036000830152614db881856146c2565b90508181036020830152614dcc81846146c2565b90509392505050565b6000602082019050614dea6000830184614720565b92915050565b6000602082019050614e05600083018461472f565b92915050565b6000608082019050614e20600083018761472f565b614e2d6020830186614bb8565b614e3a604083018561469c565b614e47606083018461472f565b95945050505050565b6000608082019050614e65600083018761472f565b614e726020830186614bc7565b614e7f604083018561472f565b614e8c606083018461472f565b95945050505050565b60006020820190508181036000830152614eaf8184614755565b905092915050565b60006020820190508181036000830152614ed181846147bf565b905092915050565b60006020820190508181036000830152614ef2816147f8565b9050919050565b60006020820190508181036000830152614f128161481b565b9050919050565b60006020820190508181036000830152614f328161483e565b9050919050565b60006020820190508181036000830152614f5281614861565b9050919050565b60006020820190508181036000830152614f7281614884565b9050919050565b60006020820190508181036000830152614f92816148a7565b9050919050565b60006020820190508181036000830152614fb2816148ed565b9050919050565b60006020820190508181036000830152614fd281614910565b9050919050565b60006020820190508181036000830152614ff281614933565b9050919050565b6000602082019050818103600083015261501281614956565b9050919050565b6000602082019050818103600083015261503281614979565b9050919050565b600060208201905081810360008301526150528161499c565b9050919050565b60006020820190508181036000830152615072816149bf565b9050919050565b60006020820190508181036000830152615092816149e2565b9050919050565b600060208201905081810360008301526150b281614a05565b9050919050565b600060208201905081810360008301526150d281614a28565b9050919050565b600060208201905081810360008301526150f281614a4b565b9050919050565b6000602082019050818103600083015261511281614a6e565b9050919050565b6000602082019050818103600083015261513281614ab4565b9050919050565b6000602082019050818103600083015261515281614ad7565b9050919050565b6000602082019050818103600083015261517281614afa565b9050919050565b6000602082019050818103600083015261519281614b1d565b9050919050565b600060208201905081810360008301526151b281614b40565b9050919050565b600060208201905081810360008301526151d281614b63565b9050919050565b600060208201905081810360008301526151f281614b86565b9050919050565b600060208201905061520e6000830184614bb8565b92915050565b60006040820190506152296000830185614bb8565b6152366020830184614bb8565b9392505050565b6000615247615258565b905061525382826155d6565b919050565b6000604051905090565b600067ffffffffffffffff82111561527d5761527c6156dc565b5b602082029050602081019050919050565b600067ffffffffffffffff8211156152a9576152a86156dc565b5b602082029050602081019050919050565b600067ffffffffffffffff8211156152d5576152d46156dc565b5b602082029050602081019050919050565b600067ffffffffffffffff821115615301576153006156dc565b5b61530a8261572d565b9050602081019050919050565b600067ffffffffffffffff821115615332576153316156dc565b5b61533b8261572d565b9050602081019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b60006153da8261554b565b91506153e58361554b565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561541a5761541961567e565b5b828201905092915050565b60006154308261554b565b915061543b8361554b565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156154745761547361567e565b5b828202905092915050565b600061548a8261554b565b91506154958361554b565b9250828210156154a8576154a761567e565b5b828203905092915050565b60006154be8261552b565b9050919050565b60006154d08261552b565b9050919050565b60008115159050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6000615524826154b3565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b82818337600083830152505050565b60005b8381101561558f578082015181840152602081019050615574565b8381111561559e576000848401525b50505050565b600060028204905060018216806155bc57607f821691505b602082108114156155d0576155cf6156ad565b5b50919050565b6155df8261572d565b810181811067ffffffffffffffff821117156155fe576155fd6156dc565b5b80604052505050565b60006156128261554b565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156156455761564461567e565b5b600182019050919050565b600061565b8261566c565b9050919050565b6000819050919050565b60006156778261573e565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600060033d111561572a5760046000803e61572760005161574b565b90505b90565b6000601f19601f8301169050919050565b60008160601b9050919050565b60008160e01c9050919050565b7f455243313135353a207472616e7366657220746f206e6f6e204552433131353560008201527f526563656976657220696d706c656d656e746572000000000000000000000000602082015250565b7f455243313135353a204552433131353552656365697665722072656a6563746560008201527f6420746f6b656e73000000000000000000000000000000000000000000000000602082015250565b7f455243313135353a2062616c616e636520717565727920666f7220746865207a60008201527f65726f2061646472657373000000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f46756e6374696f6e2063616c6c206e6f74207375636365737366756c00000000600082015250565b7f4e46543a206d696e7420616d6f756e74206d757374206265206772656174657260008201527f207468616e203000000000000000000000000000000000000000000000000000602082015250565b7f1901000000000000000000000000000000000000000000000000000000000000600082015250565b7f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260008201527f20617070726f7665640000000000000000000000000000000000000000000000602082015250565b7f4e46543a20696e76616c69642076616c75650000000000000000000000000000600082015250565b7f4e61746976654d6574615472616e73616374696f6e3a20494e56414c49445f5360008201527f49474e4552000000000000000000000000000000000000000000000000000000602082015250565b7f455243313135353a207472616e7366657220746f20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b7f455243313135353a207472616e736665722063616c6c6572206973206e6f742060008201527f6f776e6572206e6f7220617070726f7665640000000000000000000000000000602082015250565b7f455243313135355472616461626c65237572693a204e4f4e4558495354454e5460008201527f5f544f4b454e0000000000000000000000000000000000000000000000000000602082015250565b7f455243313135353a20696e73756666696369656e742062616c616e636520666f60008201527f72207472616e7366657200000000000000000000000000000000000000000000602082015250565b7f746f6b656e20696420646f6573206e6f74206578697374000000000000000000600082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f5369676e657220616e64207369676e617475726520646f206e6f74206d61746360008201527f6800000000000000000000000000000000000000000000000000000000000000602082015250565b7f4661696c656420746f2077697468647261772045746865720000000000000000600082015250565b7f6e6f206d6f726520746f6b656e73000000000000000000000000000000000000600082015250565b50565b7f4e46543a20696e697469616c4f776e65727320616e64206964735065724f776e60008201527f6572206c656e677468206d69736d617463680000000000000000000000000000602082015250565b7f746f6b656e206964206f7574206f6620626f756e647300000000000000000000600082015250565b7f746f6b656e20696420616c726561647920657869737473000000000000000000600082015250565b7f455243313135353a2073657474696e6720617070726f76616c2073746174757360008201527f20666f722073656c660000000000000000000000000000000000000000000000602082015250565b7f455243313135353a206163636f756e747320616e6420696473206c656e67746860008201527f206d69736d617463680000000000000000000000000000000000000000000000602082015250565b7f455243313135353a2069647320616e6420616d6f756e7473206c656e6774682060008201527f6d69736d61746368000000000000000000000000000000000000000000000000602082015250565b7f455243313135353a206d696e7420746f20746865207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b600060443d1015615e1b57615e9e565b615e23615258565b60043d036004823e80513d602482011167ffffffffffffffff82111715615e4b575050615e9e565b808201805167ffffffffffffffff811115615e695750505050615e9e565b80602083010160043d038501811115615e86575050505050615e9e565b615e95826020018501866155d6565b82955050505050505b90565b615eaa816154b3565b8114615eb557600080fd5b50565b615ec1816154c5565b8114615ecc57600080fd5b50565b615ed8816154d7565b8114615ee357600080fd5b50565b615eef816154e3565b8114615efa57600080fd5b50565b615f06816154ed565b8114615f1157600080fd5b50565b615f1d81615519565b8114615f2857600080fd5b50565b615f348161554b565b8114615f3f57600080fd5b50565b615f4b81615555565b8114615f5657600080fd5b5056fe4d6574615472616e73616374696f6e2875696e74323536206e6f6e63652c616464726573732066726f6d2c62797465732066756e6374696f6e5369676e617475726529a2646970667358221220f6a3529b1f2498e6f1273bcbb2050f85bf476b575ebfb4fac10380645c82571364736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "balanceOf(address,uint256)": {
        "details": "See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address."
      },
      "balanceOfBatch(address[],uint256[])": {
        "details": "See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length."
      },
      "batchMint(address[],uint256[][],string,bytes)": {
        "details": "Mint new tokens for each id in _ids",
        "params": {
          "data": "Data to pass if receiver is contract",
          "idsPerOwner": "2d Array of ids to mint for each owner. Required to be the same length as initialOwners.",
          "initialOwners": "The addresses to mint tokens to",
          "uri": "The Custom URI to set against each newly created Token"
        }
      },
      "mint(address,uint256,string,bytes)": {
        "details": "Mint a new token type and assigns _initialSupply to an address",
        "params": {
          "data": "Data to pass if receiver is contract",
          "id": "The id of the token to create (must not currenty exist).",
          "initialOwner": "address of the first owner of the token",
          "uri": "Optional URI for this token type"
        },
        "returns": {
          "_0": "The newly created token ID"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "publicMint(uint256)": {
        "details": "Publicly accessible: Mint new tokens to the contract caller based on the amount of value sent. Each token value is hard coded"
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
        "details": "See {IERC1155-safeBatchTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,uint256,bytes)": {
        "details": "See {IERC1155-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC1155-setApprovalForAll}."
      },
      "setCustomURI(uint256,string)": {
        "details": "Will update the base URI for the token",
        "params": {
          "_newURI": "New URI for the token.",
          "_tokenId": "The token to update. _msgSender() must be its creator."
        }
      },
      "setURI(string)": {
        "details": "Sets a new URI for all token types, by relying on the token type ID substitution mechanism https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].",
        "params": {
          "_newURI": "New URI for all tokens"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "totalSupply(uint256)": {
        "details": "Returns the total quantity for a token ID",
        "params": {
          "_id": "uint256 ID of the token to query"
        },
        "returns": {
          "_0": "amount of token in existence"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "withdraw(address)": {
        "details": "Withdraw funds used to publicly mint tokens"
      }
    },
    "title": "NFT NFT - a contract for non-fungible tokens using ERC 1155 for batch actions",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "batchMakePermanent(uint256[])": {
        "notice": "Mark all tokens permanent in batch"
      },
      "batchTransferToMany(address,address[],uint256[][])": {
        "notice": "Allows contract owner to mass transfer to many recipients in a single transaction"
      },
      "isApprovedForAll(address,address)": {
        "notice": "Override isApprovedForAll to whitelist user's OpenSea proxy accounts to enable gas-free listings."
      },
      "makePermanent(uint256)": {
        "notice": "Mark a single token as permanent in batch"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 130,
        "contract": "contracts/NFT.sol:NFT",
        "label": "_balances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 136,
        "contract": "contracts/NFT.sol:NFT",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 138,
        "contract": "contracts/NFT.sol:NFT",
        "label": "_uri",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 3313,
        "contract": "contracts/NFT.sol:NFT",
        "label": "inited",
        "offset": 0,
        "slot": "3",
        "type": "t_bool"
      },
      {
        "astId": 3220,
        "contract": "contracts/NFT.sol:NFT",
        "label": "domainSeperator",
        "offset": 0,
        "slot": "4",
        "type": "t_bytes32"
      },
      {
        "astId": 3359,
        "contract": "contracts/NFT.sol:NFT",
        "label": "nonces",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 7,
        "contract": "contracts/NFT.sol:NFT",
        "label": "_owner",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 2280,
        "contract": "contracts/NFT.sol:NFT",
        "label": "proxyRegistryAddress",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 2284,
        "contract": "contracts/NFT.sol:NFT",
        "label": "tokenSupply",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 2288,
        "contract": "contracts/NFT.sol:NFT",
        "label": "customUri",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 2290,
        "contract": "contracts/NFT.sol:NFT",
        "label": "name",
        "offset": 0,
        "slot": "10",
        "type": "t_string_storage"
      },
      {
        "astId": 2292,
        "contract": "contracts/NFT.sol:NFT",
        "label": "symbol",
        "offset": 0,
        "slot": "11",
        "type": "t_string_storage"
      },
      {
        "astId": 2498,
        "contract": "contracts/NFT.sol:NFT",
        "label": "_contractURI",
        "offset": 0,
        "slot": "12",
        "type": "t_string_storage"
      },
      {
        "astId": 2501,
        "contract": "contracts/NFT.sol:NFT",
        "label": "_price",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}