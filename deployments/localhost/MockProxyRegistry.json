{
  "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "proxies",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_proxyForAddress",
          "type": "address"
        }
      ],
      "name": "setProxy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xdcd9bea3f01ca46c86378d92599b5d0cc9b3cdad645a209306ec8f02f747c771",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "transactionIndex": 0,
    "gasUsed": "453122",
    "logsBloom": "0x
    "blockHash": "0xbc90d1accf6c15d31aff6595cc64c7fce4384f112876cdba44674deb8e9a731c",
    "transactionHash": "0xdcd9bea3f01ca46c86378d92599b5d0cc9b3cdad645a209306ec8f02f747c771",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 1,
        "transactionHash": "0xdcd9bea3f01ca46c86378d92599b5d0cc9b3cdad645a209306ec8f02f747c771",
        "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xbc90d1accf6c15d31aff6595cc64c7fce4384f112876cdba44674deb8e9a731c"
      }
    ],
    "blockNumber": 1,
    "cumulativeGasUsed": "453122",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "f637cb2bbfbf3965e369d911a3048c10",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"proxies\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_proxyForAddress\",\"type\":\"address\"}],\"name\":\"setProxy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"A simple mock ProxyRegistry for use in local tests with minimal security\",\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setProxy(address,address)\":{\"params\":{\"_address\":\"The address that the proxy will act on behalf of\",\"_proxyForAddress\":\"The proxy that will act on behalf of the address\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"setProxy(address,address)\":{\"notice\":\"Allow the owner to set a proxy for testing\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/test/MockProxyRegistry.sol\":\"MockProxyRegistry\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/test/MockProxyRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n/**\\n * @dev A simple mock ProxyRegistry for use in local tests with minimal security\\n */\\ncontract MockProxyRegistry is Ownable {\\n\\tmapping(address => address) public proxies;\\n\\n\\t/***********************************|\\n  |  Public Configuration Functions   |\\n  |__________________________________*/\\n\\n\\t/**\\n\\t * @notice Allow the owner to set a proxy for testing\\n\\t * @param _address           The address that the proxy will act on behalf of\\n\\t * @param _proxyForAddress  The proxy that will act on behalf of the address\\n\\t */\\n\\tfunction setProxy(address _address, address _proxyForAddress)\\n\\t\\texternal\\n\\t\\tonlyOwner\\n\\t{\\n\\t\\tproxies[_address] = _proxyForAddress;\\n\\t}\\n}\\n\",\"keccak256\":\"0xf3530cf071dc79877c0035fa2d53017329a5fecd6640969ef5f331845b5eaa7b\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061002d61002261003260201b60201c565b61003a60201b60201c565b6100fe565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6106c48061010d6000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c8063715018a61461005c5780638da5cb5b14610066578063a9d4630c14610084578063c4552791146100a0578063f2fde38b146100d0575b600080fd5b6100646100ec565b005b61006e610174565b60405161007b9190610561565b60405180910390f35b61009e600480360381019061009991906104d0565b61019d565b005b6100ba60048036038101906100b591906104a7565b61029b565b6040516100c79190610561565b60405180910390f35b6100ea60048036038101906100e591906104a7565b6102ce565b005b6100f46103c6565b73ffffffffffffffffffffffffffffffffffffffff16610112610174565b73ffffffffffffffffffffffffffffffffffffffff1614610168576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161015f9061059c565b60405180910390fd5b61017260006103ce565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6101a56103c6565b73ffffffffffffffffffffffffffffffffffffffff166101c3610174565b73ffffffffffffffffffffffffffffffffffffffff1614610219576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102109061059c565b60405180910390fd5b80600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b60016020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6102d66103c6565b73ffffffffffffffffffffffffffffffffffffffff166102f4610174565b73ffffffffffffffffffffffffffffffffffffffff161461034a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103419061059c565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156103ba576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103b19061057c565b60405180910390fd5b6103c3816103ce565b50565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000813590506104a181610677565b92915050565b6000602082840312156104b957600080fd5b60006104c784828501610492565b91505092915050565b600080604083850312156104e357600080fd5b60006104f185828601610492565b925050602061050285828601610492565b9150509250929050565b610515816105cd565b82525050565b60006105286026836105bc565b9150610533826105ff565b604082019050919050565b600061054b6020836105bc565b91506105568261064e565b602082019050919050565b6000602082019050610576600083018461050c565b92915050565b600060208201905081810360008301526105958161051b565b9050919050565b600060208201905081810360008301526105b58161053e565b9050919050565b600082825260208201905092915050565b60006105d8826105df565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b610680816105cd565b811461068b57600080fd5b5056fea264697066735822122038dc35afeb3c2c12eb59874bcdc1ce07ae3aebf2687f409fe48ce81b317ea17964736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100575760003560e01c8063715018a61461005c5780638da5cb5b14610066578063a9d4630c14610084578063c4552791146100a0578063f2fde38b146100d0575b600080fd5b6100646100ec565b005b61006e610174565b60405161007b9190610561565b60405180910390f35b61009e600480360381019061009991906104d0565b61019d565b005b6100ba60048036038101906100b591906104a7565b61029b565b6040516100c79190610561565b60405180910390f35b6100ea60048036038101906100e591906104a7565b6102ce565b005b6100f46103c6565b73ffffffffffffffffffffffffffffffffffffffff16610112610174565b73ffffffffffffffffffffffffffffffffffffffff1614610168576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161015f9061059c565b60405180910390fd5b61017260006103ce565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6101a56103c6565b73ffffffffffffffffffffffffffffffffffffffff166101c3610174565b73ffffffffffffffffffffffffffffffffffffffff1614610219576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102109061059c565b60405180910390fd5b80600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b60016020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6102d66103c6565b73ffffffffffffffffffffffffffffffffffffffff166102f4610174565b73ffffffffffffffffffffffffffffffffffffffff161461034a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103419061059c565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156103ba576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103b19061057c565b60405180910390fd5b6103c3816103ce565b50565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000813590506104a181610677565b92915050565b6000602082840312156104b957600080fd5b60006104c784828501610492565b91505092915050565b600080604083850312156104e357600080fd5b60006104f185828601610492565b925050602061050285828601610492565b9150509250929050565b610515816105cd565b82525050565b60006105286026836105bc565b9150610533826105ff565b604082019050919050565b600061054b6020836105bc565b91506105568261064e565b602082019050919050565b6000602082019050610576600083018461050c565b92915050565b600060208201905081810360008301526105958161051b565b9050919050565b600060208201905081810360008301526105b58161053e565b9050919050565b600082825260208201905092915050565b60006105d8826105df565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b610680816105cd565b811461068b57600080fd5b5056fea264697066735822122038dc35afeb3c2c12eb59874bcdc1ce07ae3aebf2687f409fe48ce81b317ea17964736f6c63430008040033",
  "devdoc": {
    "details": "A simple mock ProxyRegistry for use in local tests with minimal security",
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setProxy(address,address)": {
        "params": {
          "_address": "The address that the proxy will act on behalf of",
          "_proxyForAddress": "The proxy that will act on behalf of the address"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "setProxy(address,address)": {
        "notice": "Allow the owner to set a proxy for testing"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/test/MockProxyRegistry.sol:MockProxyRegistry",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 3435,
        "contract": "contracts/test/MockProxyRegistry.sol:MockProxyRegistry",
        "label": "proxies",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_address)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      }
    }
  }
}