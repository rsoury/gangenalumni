{
  "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_proxyRegistryAddress",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "cURI",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "tokenURI",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address payable",
          "name": "relayerAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "functionSignature",
          "type": "bytes"
        }
      ],
      "name": "MetaTransactionExecuted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "_value",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "PermanentURI",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "TransferBatch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "TransferSingle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "value",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "URI",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ERC712_VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "balanceOfBatch",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "initialOwners",
          "type": "address[]"
        },
        {
          "internalType": "uint256[][]",
          "name": "idsPerOwner",
          "type": "uint256[][]"
        }
      ],
      "name": "batchCreate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "batchMakePermanent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "_ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_quantities",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "batchMint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "recipients",
          "type": "address[]"
        },
        {
          "internalType": "uint256[][]",
          "name": "idsPerRecipient",
          "type": "uint256[][]"
        }
      ],
      "name": "batchTransferToMany",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_initialOwner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_initialSupply",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_uri",
          "type": "string"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "create",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "creators",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "functionSignature",
          "type": "bytes"
        },
        {
          "internalType": "bytes32",
          "name": "sigR",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "sigS",
          "type": "bytes32"
        },
        {
          "internalType": "uint8",
          "name": "sigV",
          "type": "uint8"
        }
      ],
      "name": "executeMetaTransaction",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "exists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getChainId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDomainSeperator",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getNonce",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isOperator",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "makePermanent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_quantity",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeBatchTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "newuri",
          "type": "string"
        }
      ],
      "name": "setContractURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "_ids",
          "type": "uint256[]"
        }
      ],
      "name": "setCreator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_newURI",
          "type": "string"
        }
      ],
      "name": "setCustomURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_newURI",
          "type": "string"
        }
      ],
      "name": "setURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokenSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x76ce27d7867a21809470c9956954a62a6d4d37b21f9ac80251e5d5252ab0afb0",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "transactionIndex": 0,
    "gasUsed": "5484378",
    "logsBloom": "0x
    "blockHash": "0xb7d505a5a10953ccdcda7fa1f53af342fa5a726023abed83f82440bf4ee279d4",
    "transactionHash": "0x76ce27d7867a21809470c9956954a62a6d4d37b21f9ac80251e5d5252ab0afb0",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 2,
        "transactionHash": "0x76ce27d7867a21809470c9956954a62a6d4d37b21f9ac80251e5d5252ab0afb0",
        "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xb7d505a5a10953ccdcda7fa1f53af342fa5a726023abed83f82440bf4ee279d4"
      }
    ],
    "blockNumber": 2,
    "cumulativeGasUsed": "5484378",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "Gangen Alumni",
    "GANGA",
    "https://gangenalumni.s3.us-east-2.amazonaws.com/rinkeby/data/contract.json",
    "https://gangenalumni.s3.us-east-2.amazonaws.com/rinkeby/data/{id}.json"
  ],
  "solcInputHash": "6cd5c43b4ecc6f763e92ec33592c9f62",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_proxyRegistryAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"cURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address payable\",\"name\":\"relayerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"functionSignature\",\"type\":\"bytes\"}],\"name\":\"MetaTransactionExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"PermanentURI\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ERC712_VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"initialOwners\",\"type\":\"address[]\"},{\"internalType\":\"uint256[][]\",\"name\":\"idsPerOwner\",\"type\":\"uint256[][]\"}],\"name\":\"batchCreate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"batchMakePermanent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_quantities\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"batchMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[][]\",\"name\":\"idsPerRecipient\",\"type\":\"uint256[][]\"}],\"name\":\"batchTransferToMany\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_initialOwner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_initialSupply\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"create\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"creators\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"functionSignature\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"sigR\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"sigS\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"sigV\",\"type\":\"uint8\"}],\"name\":\"executeMetaTransaction\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getChainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDomainSeperator\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isOperator\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"makePermanent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_quantity\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newuri\",\"type\":\"string\"}],\"name\":\"setContractURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"}],\"name\":\"setCreator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_newURI\",\"type\":\"string\"}],\"name\":\"setCustomURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_newURI\",\"type\":\"string\"}],\"name\":\"setURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"balanceOf(address,uint256)\":{\"details\":\"See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address.\"},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length.\"},\"batchMint(address,uint256[],uint256[],bytes)\":{\"details\":\"Mint tokens for each id in _ids\",\"params\":{\"_data\":\"Data to pass if receiver is contract\",\"_ids\":\"Array of ids to mint\",\"_quantities\":\"Array of amounts of tokens to mint per id\",\"_to\":\"The address to mint tokens to\"}},\"create(address,uint256,uint256,string,bytes)\":{\"details\":\"Creates a new token type and assigns _initialSupply to an address NOTE: remove onlyOwner if you want third parties to create new tokens on       your contract (which may change your IDs) NOTE: The token id must be passed. This allows lazy creation of tokens or       creating NFTs by setting the id's high bits with the method       described in ERC1155 or to use ids representing values other than       successive small integers. If you wish to create ids as successive       small integers you can either subclass this class to count onchain       or maintain the offchain cache of identifiers recommended in       ERC1155 and calculate successive ids from that.\",\"params\":{\"_data\":\"Data to pass if receiver is contract\",\"_id\":\"The id of the token to create (must not currenty exist).\",\"_initialOwner\":\"address of the first owner of the token\",\"_initialSupply\":\"amount to supply the first owner\",\"_uri\":\"Optional URI for this token type\"},\"returns\":{\"_0\":\"The newly created token ID\"}},\"mint(address,uint256,uint256,bytes)\":{\"details\":\"Mints some amount of tokens to an address\",\"params\":{\"_data\":\"Data to pass if receiver is contract\",\"_id\":\"Token ID to mint\",\"_quantity\":\"Amount of tokens to mint\",\"_to\":\"Address of the future owner of the token\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"See {IERC1155-safeBatchTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"details\":\"See {IERC1155-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC1155-setApprovalForAll}.\"},\"setCreator(address,uint256[])\":{\"details\":\"Change the creator address for given tokens\",\"params\":{\"_ids\":\"Array of Token IDs to change creator\",\"_to\":\"Address of the new creator\"}},\"setCustomURI(uint256,string)\":{\"details\":\"Will update the base URI for the token\",\"params\":{\"_newURI\":\"New URI for the token.\",\"_tokenId\":\"The token to update. _msgSender() must be its creator.\"}},\"setURI(string)\":{\"details\":\"Sets a new URI for all token types, by relying on the token type ID substitution mechanism https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\",\"params\":{\"_newURI\":\"New URI for all tokens\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"totalSupply(uint256)\":{\"details\":\"Returns the total quantity for a token ID\",\"params\":{\"_id\":\"uint256 ID of the token to query\"},\"returns\":{\"_0\":\"amount of token in existence\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"NFT NFT - a contract for non-fungible tokens using ERC 1155 for batch actions\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"batchMakePermanent(uint256[])\":{\"notice\":\"Mark all tokens permanent in batch\"},\"batchTransferToMany(address,address[],uint256[][])\":{\"notice\":\"Allows contract owner to mass transfer to many recipients in a single transaction\"},\"isApprovedForAll(address,address)\":{\"notice\":\"Override isApprovedForAll to whitelist user's OpenSea proxy accounts to enable gas-free listings.\"},\"makePermanent(uint256)\":{\"notice\":\"Mark a single token as permanent in batch\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/NFT.sol\":\"NFT\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/ERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155.sol\\\";\\nimport \\\"./IERC1155Receiver.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURI.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\\n    using Address for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    constructor(string memory uri_) {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: balance query for the zero address\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not owner nor approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: transfer caller is not owner nor approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        _balances[id][to] += amount;\\n        emit TransferSingle(operator, address(0), to, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `from`\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(\\n        address from,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), _asSingletonArray(id), _asSingletonArray(amount), \\\"\\\");\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, from, address(0), id, amount);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(\\n        address from,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, from, address(0), ids, amounts);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC1155: setting approval status for self\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n}\\n\",\"keccak256\":\"0x04d6d1342ece664085921a4fabc928a7bcf1cf2873fa81780f61a54dc2b9b66e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x8e93de94c9062ebc94fb7e2e3929b0781ac6a2b7772e2f7a59045861c93e5be9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n        @dev Handles the receipt of a single ERC1155 token type. This function is\\n        called at the end of a `safeTransferFrom` after the balance has been updated.\\n        To accept the transfer, this must return\\n        `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n        (i.e. 0xf23a6e61, or its own function selector).\\n        @param operator The address which initiated the transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param id The ID of the token being transferred\\n        @param value The amount of tokens being transferred\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\\n        is called at the end of a `safeBatchTransferFrom` after the balances have\\n        been updated. To accept the transfer(s), this must return\\n        `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n        (i.e. 0xbc197c81, or its own function selector).\\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xc743d2235b8854045c308d2f8f1ed88efed6c2bebf2b7a4a51ea42480c82e566\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xa66d18b9a85458d28fc3304717964502ae36f7f8a2ff35bc83f6f85d74b03574\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa2f576be637946f767aa56601c26d717f48a0aff44f82e46f13807eea1009a21\",\"license\":\"MIT\"},\"contracts/ERC1155Tradable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\nimport \\\"./common/meta-transactions/ContentMixin.sol\\\";\\nimport \\\"./common/meta-transactions/NativeMetaTransaction.sol\\\";\\n\\ncontract OwnableDelegateProxy { }\\n\\ncontract ProxyRegistry {\\n  mapping(address => OwnableDelegateProxy) public proxies;\\n}\\n\\n/**\\n * @title ERC1155Tradable\\n * ERC1155Tradable - ERC1155 contract that whitelists an operator address, has create and mint functionality, and supports useful standards from OpenZeppelin,\\n  like _exists(), name(), symbol(), and totalSupply()\\n */\\ncontract ERC1155Tradable is ContextMixin, ERC1155, NativeMetaTransaction, Ownable {\\n  using Strings for string;\\n  using SafeMath for uint256;\\n\\n  address proxyRegistryAddress;\\n  mapping (uint256 => address) public creators;\\n  mapping (uint256 => uint256) public tokenSupply;\\n  mapping (uint256 => string) customUri;\\n  // Contract name\\n  string public name;\\n  // Contract symbol\\n  string public symbol;\\n\\n  /**\\n   * @dev Require _msgSender() to be the creator of the token id\\n   */\\n  modifier creatorOnly(uint256 _id) {\\n    require(creators[_id] == _msgSender(), \\\"ERC1155Tradable#creatorOnly: ONLY_CREATOR_ALLOWED\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @dev Require _msgSender() to own more than 0 of the token id\\n   */\\n  modifier ownersOnly(uint256 _id) {\\n    require(balanceOf(_msgSender(), _id) > 0, \\\"ERC1155Tradable#ownersOnly: ONLY_OWNERS_ALLOWED\\\");\\n    _;\\n  }\\n\\n  constructor(\\n    string memory _name,\\n    string memory _symbol,\\n    string memory _uri,\\n    address _proxyRegistryAddress\\n  ) ERC1155(_uri) {\\n    name = _name;\\n    symbol = _symbol;\\n    proxyRegistryAddress = _proxyRegistryAddress;\\n    _initializeEIP712(name);\\n  }\\n\\n  function uri(\\n    uint256 _id\\n  ) override public view returns (string memory) {\\n    require(_exists(_id), \\\"ERC1155Tradable#uri: NONEXISTENT_TOKEN\\\");\\n    // We have to convert string to bytes to check for existence\\n    bytes memory customUriBytes = bytes(customUri[_id]);\\n    if (customUriBytes.length > 0) {\\n        return customUri[_id];\\n    } else {\\n        return super.uri(_id);\\n    }\\n  }\\n\\n  /**\\n    * @dev Returns the total quantity for a token ID\\n    * @param _id uint256 ID of the token to query\\n    * @return amount of token in existence\\n    */\\n  function totalSupply(\\n    uint256 _id\\n  ) public view returns (uint256) {\\n    return tokenSupply[_id];\\n  }\\n\\n  /**\\n   * @dev Sets a new URI for all token types, by relying on the token type ID\\n    * substitution mechanism\\n    * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n   * @param _newURI New URI for all tokens\\n   */\\n  function setURI(\\n    string memory _newURI\\n  ) public onlyOwner {\\n    _setURI(_newURI);\\n  }\\n\\n  /**\\n   * @dev Will update the base URI for the token\\n   * @param _tokenId The token to update. _msgSender() must be its creator.\\n   * @param _newURI New URI for the token.\\n   */\\n  function setCustomURI(\\n    uint256 _tokenId,\\n    string memory _newURI\\n  ) public creatorOnly(_tokenId) {\\n    customUri[_tokenId] = _newURI;\\n    emit URI(_newURI, _tokenId);\\n  }\\n\\n  /**\\n    * @dev Creates a new token type and assigns _initialSupply to an address\\n    * NOTE: remove onlyOwner if you want third parties to create new tokens on\\n    *       your contract (which may change your IDs)\\n    * NOTE: The token id must be passed. This allows lazy creation of tokens or\\n    *       creating NFTs by setting the id's high bits with the method\\n    *       described in ERC1155 or to use ids representing values other than\\n    *       successive small integers. If you wish to create ids as successive\\n    *       small integers you can either subclass this class to count onchain\\n    *       or maintain the offchain cache of identifiers recommended in\\n    *       ERC1155 and calculate successive ids from that.\\n    * @param _initialOwner address of the first owner of the token\\n    * @param _id The id of the token to create (must not currenty exist).\\n    * @param _initialSupply amount to supply the first owner\\n    * @param _uri Optional URI for this token type\\n    * @param _data Data to pass if receiver is contract\\n    * @return The newly created token ID\\n    */\\n  function create(\\n    address _initialOwner,\\n    uint256 _id,\\n    uint256 _initialSupply,\\n    string memory _uri,\\n    bytes memory _data\\n  ) public onlyOwner returns (uint256) {\\n    require(!_exists(_id), \\\"token _id already exists\\\");\\n    creators[_id] = _msgSender();\\n\\n    if (bytes(_uri).length > 0) {\\n      customUri[_id] = _uri;\\n      emit URI(_uri, _id);\\n    }\\n\\n    _mint(_initialOwner, _id, _initialSupply, _data);\\n\\n    tokenSupply[_id] = _initialSupply;\\n    return _id;\\n  }\\n\\n  /**\\n    * @dev Mints some amount of tokens to an address\\n    * @param _to          Address of the future owner of the token\\n    * @param _id          Token ID to mint\\n    * @param _quantity    Amount of tokens to mint\\n    * @param _data        Data to pass if receiver is contract\\n    */\\n  function mint(\\n    address _to,\\n    uint256 _id,\\n    uint256 _quantity,\\n    bytes memory _data\\n  ) virtual public creatorOnly(_id) {\\n    _mint(_to, _id, _quantity, _data);\\n    tokenSupply[_id] = tokenSupply[_id].add(_quantity);\\n  }\\n\\n  /**\\n    * @dev Mint tokens for each id in _ids\\n    * @param _to          The address to mint tokens to\\n    * @param _ids         Array of ids to mint\\n    * @param _quantities  Array of amounts of tokens to mint per id\\n    * @param _data        Data to pass if receiver is contract\\n    */\\n  function batchMint(\\n    address _to,\\n    uint256[] memory _ids,\\n    uint256[] memory _quantities,\\n    bytes memory _data\\n  ) public {\\n    for (uint256 i = 0; i < _ids.length; i++) {\\n      uint256 _id = _ids[i];\\n      require(creators[_id] == _msgSender(), \\\"ERC1155Tradable#batchMint: ONLY_CREATOR_ALLOWED\\\");\\n      uint256 quantity = _quantities[i];\\n      tokenSupply[_id] = tokenSupply[_id].add(quantity);\\n    }\\n    _mintBatch(_to, _ids, _quantities, _data);\\n  }\\n\\n  /**\\n    * @dev Change the creator address for given tokens\\n    * @param _to   Address of the new creator\\n    * @param _ids  Array of Token IDs to change creator\\n    */\\n  function setCreator(\\n    address _to,\\n    uint256[] memory _ids\\n  ) public {\\n    require(_to != address(0), \\\"ERC1155Tradable#setCreator: INVALID_ADDRESS.\\\");\\n    for (uint256 i = 0; i < _ids.length; i++) {\\n      uint256 id = _ids[i];\\n      _setCreator(_to, id);\\n    }\\n  }\\n\\n  /**\\n   * Override isApprovedForAll to whitelist user's OpenSea proxy accounts to enable gas-free listings.\\n   */\\n  function isApprovedForAll(\\n    address _owner,\\n    address _operator\\n  ) override public view returns (bool isOperator) {\\n    // Whitelist OpenSea proxy contract for easy trading.\\n    ProxyRegistry proxyRegistry = ProxyRegistry(proxyRegistryAddress);\\n    if (address(proxyRegistry.proxies(_owner)) == _operator) {\\n      return true;\\n    }\\n\\n    return ERC1155.isApprovedForAll(_owner, _operator);\\n  }\\n\\n  /**\\n    * @dev Change the creator address for given token\\n    * @param _to   Address of the new creator\\n    * @param _id  Token IDs to change creator of\\n    */\\n  function _setCreator(address _to, uint256 _id) internal creatorOnly(_id)\\n  {\\n      creators[_id] = _to;\\n  }\\n\\n  /**\\n    * @dev Returns whether the specified token exists by checking to see if it has a creator\\n    * @param _id uint256 ID of the token to query the existence of\\n    * @return bool whether the token exists\\n    */\\n  function _exists(\\n    uint256 _id\\n  ) internal view returns (bool) {\\n    return creators[_id] != address(0);\\n  }\\n\\n  function exists(\\n    uint256 _id\\n  ) external view returns (bool) {\\n    return _exists(_id);\\n  }\\n\\n    /**\\n     * This is used instead of msg.sender as transactions won't be sent by the original token owner, but by OpenSea.\\n     */\\n    function _msgSender()\\n        internal\\n        override\\n        view\\n        returns (address sender)\\n    {\\n        return ContextMixin.msgSender();\\n    }\\n}\\n\",\"keccak256\":\"0xbc609855a4ac2d82173522f557a1956868bf3f1a56b1eb7afef11bb004c4559a\",\"license\":\"MIT\"},\"contracts/NFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC1155Tradable.sol\\\";\\n\\n/**\\n * @title NFT\\n * NFT - a contract for non-fungible tokens using ERC 1155 for batch actions\\n */\\ncontract NFT is ERC1155Tradable {\\n\\t// Create a contract URI variable\\n\\tstring private _contractURI;\\n\\n\\tevent PermanentURI(string _value, uint256 indexed _id);\\n\\n\\tconstructor(\\n\\t\\taddress _proxyRegistryAddress,\\n\\t\\tstring memory name,\\n\\t\\tstring memory symbol,\\n\\t\\tstring memory cURI,\\n\\t\\tstring memory tokenURI\\n\\t) ERC1155Tradable(name, symbol, tokenURI, _proxyRegistryAddress) {\\n\\t\\t_contractURI = cURI;\\n\\t}\\n\\n\\tfunction contractURI() public view returns (string memory) {\\n\\t\\treturn _contractURI;\\n\\t}\\n\\n\\tfunction setContractURI(string memory newuri) public onlyOwner {\\n\\t\\t_contractURI = newuri;\\n\\t}\\n\\n\\t/*\\n\\t\\tAllows contract owner to mass create tokens and issue to initialOwners addresses in a single transaction\\n\\t*/\\n\\tfunction batchCreate(\\n\\t\\taddress[] memory initialOwners,\\n\\t\\tuint256[][] memory idsPerOwner\\n\\t) public {\\n\\t\\tfor (uint256 i = 0; i < initialOwners.length; i++) {\\n\\t\\t\\taddress initialOwner = initialOwners[i];\\n\\t\\t\\tuint256[] memory ids = idsPerOwner[i];\\n\\t\\t\\tfor (uint256 j = 0; j < ids.length; j++) {\\n\\t\\t\\t\\tuint256 id = ids[j];\\n\\t\\t\\t\\tuint256 quantity = 1;\\n\\n\\t\\t\\t\\tsuper.create(initialOwner, id, quantity, \\\"\\\", \\\"\\\");\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t\\tAllows contract owner to mass transfer to many recipients in a single transaction\\n\\t */\\n\\tfunction batchTransferToMany(\\n\\t\\taddress from,\\n\\t\\taddress[] memory recipients,\\n\\t\\tuint256[][] memory idsPerRecipient\\n\\t) public {\\n\\t\\tfor (uint256 i = 0; i < recipients.length; i++) {\\n\\t\\t\\taddress recipient = recipients[i];\\n\\t\\t\\tuint256[] memory ids = idsPerRecipient[i];\\n\\t\\t\\tuint256[] memory quantities = new uint256[](ids.length);\\n\\t\\t\\tfor (uint256 j = 0; j < ids.length; j++) {\\n\\t\\t\\t\\tuint256 quantity = super.balanceOf(from, ids[j]);\\n\\t\\t\\t\\tquantities[j] = quantity;\\n\\t\\t\\t}\\n\\t\\t\\tbytes memory data = \\\"\\\";\\n\\t\\t\\tsuper.safeBatchTransferFrom(from, recipient, ids, quantities, data);\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t\\tMark a single token as permanent in batch\\n\\t */\\n\\tfunction makePermanent(uint256 id) public creatorOnly(id) {\\n\\t\\trequire(_exists(id), \\\"token id does not exist\\\");\\n\\t\\tstring memory tokenURI = uri(id);\\n\\t\\temit PermanentURI(tokenURI, id);\\n\\t}\\n\\n\\t/**\\n\\t\\tMark all tokens permanent in batch\\n\\t */\\n\\tfunction batchMakePermanent(uint256[] memory ids) public {\\n\\t\\tfor (uint256 i = 0; i < ids.length; i++) {\\n\\t\\t\\tmakePermanent(ids[i]);\\n\\t\\t}\\n\\t}\\n}\\n\",\"keccak256\":\"0x53d8f8a889618cddf4f4e3b64b278c7e45da304ec2d2a6f826282e3603293819\",\"license\":\"MIT\"},\"contracts/common/meta-transactions/ContentMixin.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nabstract contract ContextMixin {\\n\\tfunction msgSender() internal view returns (address payable sender) {\\n\\t\\tif (msg.sender == address(this)) {\\n\\t\\t\\tbytes memory array = msg.data;\\n\\t\\t\\tuint256 index = msg.data.length;\\n\\t\\t\\tassembly {\\n\\t\\t\\t\\t// Load the 32 bytes word from memory with the address on the lower 20 bytes, and mask those.\\n\\t\\t\\t\\tsender := and(\\n\\t\\t\\t\\t\\tmload(add(array, index)),\\n\\t\\t\\t\\t\\t0xffffffffffffffffffffffffffffffffffffffff\\n\\t\\t\\t\\t)\\n\\t\\t\\t}\\n\\t\\t} else {\\n\\t\\t\\tsender = payable(msg.sender);\\n\\t\\t}\\n\\t\\treturn sender;\\n\\t}\\n}\\n\",\"keccak256\":\"0x3903c58765e5dcf703340704c5b23523b10d0b90bb6b9f63c196ed55ef42e70e\",\"license\":\"MIT\"},\"contracts/common/meta-transactions/EIP712Base.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { Initializable } from \\\"./Initializable.sol\\\";\\n\\ncontract EIP712Base is Initializable {\\n\\tstruct EIP712Domain {\\n\\t\\tstring name;\\n\\t\\tstring version;\\n\\t\\taddress verifyingContract;\\n\\t\\tbytes32 salt;\\n\\t}\\n\\n\\tstring public constant ERC712_VERSION = \\\"1\\\";\\n\\n\\tbytes32 internal constant EIP712_DOMAIN_TYPEHASH =\\n\\t\\tkeccak256(\\n\\t\\t\\tbytes(\\n\\t\\t\\t\\t\\\"EIP712Domain(string name,string version,address verifyingContract,bytes32 salt)\\\"\\n\\t\\t\\t)\\n\\t\\t);\\n\\tbytes32 internal domainSeperator;\\n\\n\\t// supposed to be called once while initializing.\\n\\t// one of the contracts that inherits this contract follows proxy pattern\\n\\t// so it is not possible to do this in a constructor\\n\\tfunction _initializeEIP712(string memory name) internal initializer {\\n\\t\\t_setDomainSeperator(name);\\n\\t}\\n\\n\\tfunction _setDomainSeperator(string memory name) internal {\\n\\t\\tdomainSeperator = keccak256(\\n\\t\\t\\tabi.encode(\\n\\t\\t\\t\\tEIP712_DOMAIN_TYPEHASH,\\n\\t\\t\\t\\tkeccak256(bytes(name)),\\n\\t\\t\\t\\tkeccak256(bytes(ERC712_VERSION)),\\n\\t\\t\\t\\taddress(this),\\n\\t\\t\\t\\tbytes32(getChainId())\\n\\t\\t\\t)\\n\\t\\t);\\n\\t}\\n\\n\\tfunction getDomainSeperator() public view returns (bytes32) {\\n\\t\\treturn domainSeperator;\\n\\t}\\n\\n\\tfunction getChainId() public view returns (uint256) {\\n\\t\\tuint256 id;\\n\\t\\tassembly {\\n\\t\\t\\tid := chainid()\\n\\t\\t}\\n\\t\\treturn id;\\n\\t}\\n\\n\\t/**\\n\\t * Accept message hash and returns hash message in EIP712 compatible form\\n\\t * So that it can be used to recover signer from signature signed using EIP712 formatted data\\n\\t * https://eips.ethereum.org/EIPS/eip-712\\n\\t * \\\"\\\\\\\\x19\\\" makes the encoding deterministic\\n\\t * \\\"\\\\\\\\x01\\\" is the version byte to make it compatible to EIP-191\\n\\t */\\n\\tfunction toTypedMessageHash(bytes32 messageHash)\\n\\t\\tinternal\\n\\t\\tview\\n\\t\\treturns (bytes32)\\n\\t{\\n\\t\\treturn\\n\\t\\t\\tkeccak256(\\n\\t\\t\\t\\tabi.encodePacked(\\\"\\\\x19\\\\x01\\\", getDomainSeperator(), messageHash)\\n\\t\\t\\t);\\n\\t}\\n}\\n\",\"keccak256\":\"0xc02dad933e0b587d494b54009899e4387df9b39047bb51d72b4ddd8a133acde5\",\"license\":\"MIT\"},\"contracts/common/meta-transactions/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ncontract Initializable {\\n\\tbool inited = false;\\n\\n\\tmodifier initializer() {\\n\\t\\trequire(!inited, \\\"already inited\\\");\\n\\t\\t_;\\n\\t\\tinited = true;\\n\\t}\\n}\\n\",\"keccak256\":\"0x91fa455cfa5df78964476f11e413e12b4b3bde0c1a0a2f368585fa9419737505\",\"license\":\"MIT\"},\"contracts/common/meta-transactions/NativeMetaTransaction.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { SafeMath } from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport { EIP712Base } from \\\"./EIP712Base.sol\\\";\\n\\ncontract NativeMetaTransaction is EIP712Base {\\n\\tusing SafeMath for uint256;\\n\\tbytes32 private constant META_TRANSACTION_TYPEHASH =\\n\\t\\tkeccak256(\\n\\t\\t\\tbytes(\\n\\t\\t\\t\\t\\\"MetaTransaction(uint256 nonce,address from,bytes functionSignature)\\\"\\n\\t\\t\\t)\\n\\t\\t);\\n\\tevent MetaTransactionExecuted(\\n\\t\\taddress userAddress,\\n\\t\\taddress payable relayerAddress,\\n\\t\\tbytes functionSignature\\n\\t);\\n\\tmapping(address => uint256) nonces;\\n\\n\\t/*\\n\\t * Meta transaction structure.\\n\\t * No point of including value field here as if user is doing value transfer then he has the funds to pay for gas\\n\\t * He should call the desired function directly in that case.\\n\\t */\\n\\tstruct MetaTransaction {\\n\\t\\tuint256 nonce;\\n\\t\\taddress from;\\n\\t\\tbytes functionSignature;\\n\\t}\\n\\n\\tfunction executeMetaTransaction(\\n\\t\\taddress userAddress,\\n\\t\\tbytes memory functionSignature,\\n\\t\\tbytes32 sigR,\\n\\t\\tbytes32 sigS,\\n\\t\\tuint8 sigV\\n\\t) public payable returns (bytes memory) {\\n\\t\\tMetaTransaction memory metaTx = MetaTransaction({\\n\\t\\t\\tnonce: nonces[userAddress],\\n\\t\\t\\tfrom: userAddress,\\n\\t\\t\\tfunctionSignature: functionSignature\\n\\t\\t});\\n\\n\\t\\trequire(\\n\\t\\t\\tverify(userAddress, metaTx, sigR, sigS, sigV),\\n\\t\\t\\t\\\"Signer and signature do not match\\\"\\n\\t\\t);\\n\\n\\t\\t// increase nonce for user (to avoid re-use)\\n\\t\\tnonces[userAddress] = nonces[userAddress].add(1);\\n\\n\\t\\temit MetaTransactionExecuted(\\n\\t\\t\\tuserAddress,\\n\\t\\t\\tpayable(msg.sender),\\n\\t\\t\\tfunctionSignature\\n\\t\\t);\\n\\n\\t\\t// Append userAddress and relayer address at the end to extract it from calling context\\n\\t\\t(bool success, bytes memory returnData) = address(this).call(\\n\\t\\t\\tabi.encodePacked(functionSignature, userAddress)\\n\\t\\t);\\n\\t\\trequire(success, \\\"Function call not successful\\\");\\n\\n\\t\\treturn returnData;\\n\\t}\\n\\n\\tfunction hashMetaTransaction(MetaTransaction memory metaTx)\\n\\t\\tinternal\\n\\t\\tpure\\n\\t\\treturns (bytes32)\\n\\t{\\n\\t\\treturn\\n\\t\\t\\tkeccak256(\\n\\t\\t\\t\\tabi.encode(\\n\\t\\t\\t\\t\\tMETA_TRANSACTION_TYPEHASH,\\n\\t\\t\\t\\t\\tmetaTx.nonce,\\n\\t\\t\\t\\t\\tmetaTx.from,\\n\\t\\t\\t\\t\\tkeccak256(metaTx.functionSignature)\\n\\t\\t\\t\\t)\\n\\t\\t\\t);\\n\\t}\\n\\n\\tfunction getNonce(address user) public view returns (uint256 nonce) {\\n\\t\\tnonce = nonces[user];\\n\\t}\\n\\n\\tfunction verify(\\n\\t\\taddress signer,\\n\\t\\tMetaTransaction memory metaTx,\\n\\t\\tbytes32 sigR,\\n\\t\\tbytes32 sigS,\\n\\t\\tuint8 sigV\\n\\t) internal view returns (bool) {\\n\\t\\trequire(signer != address(0), \\\"NativeMetaTransaction: INVALID_SIGNER\\\");\\n\\t\\treturn\\n\\t\\t\\tsigner ==\\n\\t\\t\\tecrecover(\\n\\t\\t\\t\\ttoTypedMessageHash(hashMetaTransaction(metaTx)),\\n\\t\\t\\t\\tsigV,\\n\\t\\t\\t\\tsigR,\\n\\t\\t\\t\\tsigS\\n\\t\\t\\t);\\n\\t}\\n}\\n\",\"keccak256\":\"0xd0e99c3f9e92d054c7dbc7b5947d5ec4b91edc189f984d0078ff00e751970946\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106101f85760003560e01c8063715018a61161010d578063b48ab8b6116100a0578063d2a6b51a1161006f578063d2a6b51a1461076b578063e8a3d48514610794578063e985e9c5146107bf578063f242432a146107fc578063f2fde38b14610825576101f8565b8063b48ab8b61461069f578063bd85b039146106c8578063c00cdae914610705578063cd53d08e1461072e576101f8565b80638da5cb5b116100dc5780638da5cb5b146105f7578063938e3d7b1461062257806395d89b411461064b578063a22cb46514610676576101f8565b8063715018a614610565578063731133e91461057c5780637adbaa02146105a55780638678fb39146105ce576101f8565b80632693ebf2116101905780633408e4701161015f5780633408e4701461045a57806336a100d5146104855780633adf80b4146104c25780634e1273f4146104eb5780634f558e7914610528576101f8565b80632693ebf21461038e5780632d0335ab146103cb5780632e24afb0146104085780632eb2c2d614610431576101f8565b80630c53c51c116101cc5780630c53c51c146102cb5780630e89341c146102fb5780630f7e59701461033857806320379ee514610363576101f8565b8062fdd58e146101fd57806301ffc9a71461023a57806302fe53051461027757806306fdde03146102a0575b600080fd5b34801561020957600080fd5b50610224600480360381019061021f919061412e565b61084e565b6040516102319190614f61565b60405180910390f35b34801561024657600080fd5b50610261600480360381019061025c91906143a5565b610917565b60405161026e9190614b9d565b60405180910390f35b34801561028357600080fd5b5061029e60048036038101906102999190614420565b6109f9565b005b3480156102ac57600080fd5b506102b5610a81565b6040516102c29190614c7f565b60405180910390f35b6102e560048036038101906102e0919061409f565b610b0f565b6040516102f29190614c5d565b60405180910390f35b34801561030757600080fd5b50610322600480360381019061031d9190614461565b610d81565b60405161032f9190614c7f565b60405180910390f35b34801561034457600080fd5b5061034d610f2b565b60405161035a9190614c7f565b60405180910390f35b34801561036f57600080fd5b50610378610f64565b6040516103859190614bb8565b60405180910390f35b34801561039a57600080fd5b506103b560048036038101906103b09190614461565b610f6e565b6040516103c29190614f61565b60405180910390f35b3480156103d757600080fd5b506103f260048036038101906103ed9190613d32565b610f86565b6040516103ff9190614f61565b60405180910390f35b34801561041457600080fd5b5061042f600480360381019061042a9190614461565b610fcf565b005b34801561043d57600080fd5b5061045860048036038101906104539190613d97565b61110a565b005b34801561046657600080fd5b5061046f6111ab565b60405161047c9190614f61565b60405180910390f35b34801561049157600080fd5b506104ac60048036038101906104a791906141e5565b6111b8565b6040516104b99190614f61565b60405180910390f35b3480156104ce57600080fd5b506104e960048036038101906104e4919061448a565b611373565b005b3480156104f757600080fd5b50610512600480360381019061050d91906142f8565b611481565b60405161051f9190614b44565b60405180910390f35b34801561053457600080fd5b5061054f600480360381019061054a9190614461565b611632565b60405161055c9190614b9d565b60405180910390f35b34801561057157600080fd5b5061057a611644565b005b34801561058857600080fd5b506105a3600480360381019061059e919061416a565b6116cc565b005b3480156105b157600080fd5b506105cc60048036038101906105c79190614364565b6117c5565b005b3480156105da57600080fd5b506105f560048036038101906105f0919061428c565b611831565b005b34801561060357600080fd5b5061060c61197a565b6040516106199190614a29565b60405180910390f35b34801561062e57600080fd5b5061064960048036038101906106449190614420565b6119a4565b005b34801561065757600080fd5b50610660611a3a565b60405161066d9190614c7f565b60405180910390f35b34801561068257600080fd5b5061069d60048036038101906106989190614063565b611ac8565b005b3480156106ab57600080fd5b506106c660048036038101906106c19190613fb8565b611ade565b005b3480156106d457600080fd5b506106ef60048036038101906106ea9190614461565b611c81565b6040516106fc9190614f61565b60405180910390f35b34801561071157600080fd5b5061072c60048036038101906107279190613ee5565b611c9e565b005b34801561073a57600080fd5b5061075560048036038101906107509190614461565b611e9b565b6040516107629190614a29565b60405180910390f35b34801561077757600080fd5b50610792600480360381019061078d9190613f64565b611ece565b005b3480156107a057600080fd5b506107a9611fb2565b6040516107b69190614c7f565b60405180910390f35b3480156107cb57600080fd5b506107e660048036038101906107e19190613d5b565b612044565b6040516107f39190614b9d565b60405180910390f35b34801561080857600080fd5b50610823600480360381019061081e9190613e56565b612146565b005b34801561083157600080fd5b5061084c60048036038101906108479190613d32565b6121e7565b005b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156108bf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108b690614d21565b60405180910390fd5b60008083815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b60007fd9b67a26000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806109e257507f0e89341c000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806109f257506109f182612390565b5b9050919050565b610a016123fa565b73ffffffffffffffffffffffffffffffffffffffff16610a1f61197a565b73ffffffffffffffffffffffffffffffffffffffff1614610a75576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a6c90614e61565b60405180910390fd5b610a7e81612409565b50565b600b8054610a8e9061527e565b80601f0160208091040260200160405190810160405280929190818152602001828054610aba9061527e565b8015610b075780601f10610adc57610100808354040283529160200191610b07565b820191906000526020600020905b815481529060010190602001808311610aea57829003601f168201915b505050505081565b606060006040518060600160405280600560008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205481526020018873ffffffffffffffffffffffffffffffffffffffff168152602001878152509050610b928782878787612423565b610bd1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bc890614e81565b60405180910390fd5b610c246001600560008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461252c90919063ffffffff16565b600560008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055507f5845892132946850460bff5a0083f71031bc5bf9aadcd40f1de79423eac9b10b873388604051610c9a93929190614a44565b60405180910390a16000803073ffffffffffffffffffffffffffffffffffffffff16888a604051602001610ccf9291906149ca565b604051602081830303815290604052604051610ceb91906149b3565b6000604051808303816000865af19150503d8060008114610d28576040519150601f19603f3d011682016040523d82523d6000602084013e610d2d565b606091505b509150915081610d72576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d6990614d61565b60405180910390fd5b80935050505095945050505050565b6060610d8c82612542565b610dcb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dc290614e01565b60405180910390fd5b6000600a60008481526020019081526020016000208054610deb9061527e565b80601f0160208091040260200160405190810160405280929190818152602001828054610e179061527e565b8015610e645780601f10610e3957610100808354040283529160200191610e64565b820191906000526020600020905b815481529060010190602001808311610e4757829003601f168201915b50505050509050600081511115610f1957600a60008481526020019081526020016000208054610e939061527e565b80601f0160208091040260200160405190810160405280929190818152602001828054610ebf9061527e565b8015610f0c5780601f10610ee157610100808354040283529160200191610f0c565b820191906000526020600020905b815481529060010190602001808311610eef57829003601f168201915b5050505050915050610f26565b610f22836125ae565b9150505b919050565b6040518060400160405280600181526020017f310000000000000000000000000000000000000000000000000000000000000081525081565b6000600454905090565b60096020528060005260406000206000915090505481565b6000600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b80610fd86123fa565b73ffffffffffffffffffffffffffffffffffffffff166008600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611078576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161106f90614f41565b60405180910390fd5b61108182612542565b6110c0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110b790614e41565b60405180910390fd5b60006110cb83610d81565b9050827fa109ba539900bf1b633f956d63c96fc89b814c7287f7aa50a9216d0b55657207826040516110fd9190614c7f565b60405180910390a2505050565b6111126123fa565b73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614806111585750611157856111526123fa565b612044565b5b611197576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161118e90614de1565b60405180910390fd5b6111a48585858585612642565b5050505050565b6000804690508091505090565b60006111c26123fa565b73ffffffffffffffffffffffffffffffffffffffff166111e061197a565b73ffffffffffffffffffffffffffffffffffffffff1614611236576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161122d90614e61565b60405180910390fd5b61123f85612542565b1561127f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161127690614cc1565b60405180910390fd5b6112876123fa565b6008600087815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000835111156113435782600a6000878152602001908152602001600020908051906020019061130992919061393b565b50847f6bb7ff708619ba0610cba295a58592e0451dee2622938c8755667688daf3529b8460405161133a9190614c7f565b60405180910390a25b61134f868686856129a2565b83600960008781526020019081526020016000208190555084905095945050505050565b8161137c6123fa565b73ffffffffffffffffffffffffffffffffffffffff166008600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461141c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161141390614f41565b60405180910390fd5b81600a6000858152602001908152602001600020908051906020019061144392919061393b565b50827f6bb7ff708619ba0610cba295a58592e0451dee2622938c8755667688daf3529b836040516114749190614c7f565b60405180910390a2505050565b606081518351146114c7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114be90614ee1565b60405180910390fd5b6000835167ffffffffffffffff81111561150a577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156115385781602001602082028036833780820191505090505b50905060005b8451811015611627576115d1858281518110611583577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101518583815181106115c4577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015161084e565b82828151811061160a577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101818152505080611620906152e1565b905061153e565b508091505092915050565b600061163d82612542565b9050919050565b61164c6123fa565b73ffffffffffffffffffffffffffffffffffffffff1661166a61197a565b73ffffffffffffffffffffffffffffffffffffffff16146116c0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116b790614e61565b60405180910390fd5b6116ca6000612b38565b565b826116d56123fa565b73ffffffffffffffffffffffffffffffffffffffff166008600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611775576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161176c90614f41565b60405180910390fd5b611781858585856129a2565b6117a783600960008781526020019081526020016000205461252c90919063ffffffff16565b60096000868152602001908152602001600020819055505050505050565b60005b815181101561182d5761181a82828151811061180d577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151610fcf565b8080611825906152e1565b9150506117c8565b5050565b60005b8251811015611975576000838281518110611878577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151905060008383815181106118bd577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151905060005b815181101561195f57600082828151811061190e577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151905060006001905061194985838360405180602001604052806000815250604051806020016040528060008152506111b8565b5050508080611957906152e1565b9150506118ca565b505050808061196d906152e1565b915050611834565b505050565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6119ac6123fa565b73ffffffffffffffffffffffffffffffffffffffff166119ca61197a565b73ffffffffffffffffffffffffffffffffffffffff1614611a20576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a1790614e61565b60405180910390fd5b80600d9080519060200190611a3692919061393b565b5050565b600c8054611a479061527e565b80601f0160208091040260200160405190810160405280929190818152602001828054611a739061527e565b8015611ac05780601f10611a9557610100808354040283529160200191611ac0565b820191906000526020600020905b815481529060010190602001808311611aa357829003601f168201915b505050505081565b611ada611ad36123fa565b8383612bfe565b5050565b60005b8351811015611c6e576000848281518110611b25577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101519050611b376123fa565b73ffffffffffffffffffffffffffffffffffffffff166008600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611bd7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bce90614d01565b60405180910390fd5b6000848381518110611c12577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101519050611c4281600960008581526020019081526020016000205461252c90919063ffffffff16565b600960008481526020019081526020016000208190555050508080611c66906152e1565b915050611ae1565b50611c7b84848484612d6b565b50505050565b600060096000838152602001908152602001600020549050919050565b60005b8251811015611e95576000838281518110611ce5577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015190506000838381518110611d2a577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015190506000815167ffffffffffffffff811115611d77577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051908082528060200260200182016040528015611da55781602001602082028036833780820191505090505b50905060005b8251811015611e5c576000611e0089858481518110611df3577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015161084e565b905080838381518110611e3c577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001018181525050508080611e54906152e1565b915050611dab565b506000604051806020016040528060008152509050611e7e888585858561110a565b505050508080611e8d906152e1565b915050611ca1565b50505050565b60086020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611f3e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f3590614ea1565b60405180910390fd5b60005b8151811015611fad576000828281518110611f85577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101519050611f998482612fd5565b508080611fa5906152e1565b915050611f41565b505050565b6060600d8054611fc19061527e565b80601f0160208091040260200160405190810160405280929190818152602001828054611fed9061527e565b801561203a5780601f1061200f5761010080835404028352916020019161203a565b820191906000526020600020905b81548152906001019060200180831161201d57829003601f168201915b5050505050905090565b600080600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1663c4552791866040518263ffffffff1660e01b81526004016120bc9190614a29565b60206040518083038186803b1580156120d457600080fd5b505afa1580156120e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061210c91906143f7565b73ffffffffffffffffffffffffffffffffffffffff161415612132576001915050612140565b61213c84846130d5565b9150505b92915050565b61214e6123fa565b73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16148061219457506121938561218e6123fa565b612044565b5b6121d3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121ca90614d81565b60405180910390fd5b6121e08585858585613169565b5050505050565b6121ef6123fa565b73ffffffffffffffffffffffffffffffffffffffff1661220d61197a565b73ffffffffffffffffffffffffffffffffffffffff1614612263576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161225a90614e61565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156122d3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122ca90614d41565b60405180910390fd5b6122dc81612b38565b50565b60003073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141561238957600080368080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509050600080369050905073ffffffffffffffffffffffffffffffffffffffff81830151169250505061238d565b3390505b90565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b60006124046122df565b905090565b806002908051906020019061241f92919061393b565b5050565b60008073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff161415612494576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161248b90614da1565b60405180910390fd5b60016124a76124a2876133eb565b613453565b838686604051600081526020016040526040516124c79493929190614c18565b6020604051602081039080840390855afa1580156124e9573d6000803e3d6000fd5b5050506020604051035173ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff1614905095945050505050565b6000818361253a9190615137565b905092915050565b60008073ffffffffffffffffffffffffffffffffffffffff166008600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b6060600280546125bd9061527e565b80601f01602080910402602001604051908101604052809291908181526020018280546125e99061527e565b80156126365780601f1061260b57610100808354040283529160200191612636565b820191906000526020600020905b81548152906001019060200180831161261957829003601f168201915b50505050509050919050565b8151835114612686576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161267d90614f01565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614156126f6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016126ed90614dc1565b60405180910390fd5b60006127006123fa565b905061271081878787878761348c565b60005b845181101561290d576000858281518110612757577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101519050600085838151811061279c577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101519050600080600084815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508181101561283d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161283490614e21565b60405180910390fd5b81810360008085815260200190815260200160002060008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508160008085815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546128f29190615137565b9250508190555050505080612906906152e1565b9050612713565b508473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051612984929190614b66565b60405180910390a461299a818787878787613494565b505050505050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415612a12576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a0990614f21565b60405180910390fd5b6000612a1c6123fa565b9050612a3d81600087612a2e8861367b565b612a378861367b565b8761348c565b8260008086815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254612a9c9190615137565b925050819055508473ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f628787604051612b1a929190614f7c565b60405180910390a4612b3181600087878787613741565b5050505050565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415612c6d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612c6490614ec1565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051612d5e9190614b9d565b60405180910390a3505050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415612ddb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612dd290614f21565b60405180910390fd5b8151835114612e1f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612e1690614f01565b60405180910390fd5b6000612e296123fa565b9050612e3a8160008787878761348c565b60005b8451811015612f3f57838181518110612e7f577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151600080878481518110612ec3577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254612f259190615137565b925050819055508080612f37906152e1565b915050612e3d565b508473ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051612fb7929190614b66565b60405180910390a4612fce81600087878787613494565b5050505050565b80612fde6123fa565b73ffffffffffffffffffffffffffffffffffffffff166008600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461307e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161307590614f41565b60405180910390fd5b826008600084815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614156131d9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016131d090614dc1565b60405180910390fd5b60006131e36123fa565b90506132038187876131f48861367b565b6131fd8861367b565b8761348c565b600080600086815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508381101561329a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161329190614e21565b60405180910390fd5b83810360008087815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508360008087815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461334f9190615137565b925050819055508573ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f6288886040516133cc929190614f7c565b60405180910390a46133e2828888888888613741565b50505050505050565b6000604051806080016040528060438152602001615bc56043913980519060200120826000015183602001518460400151805190602001206040516020016134369493929190614bd3565b604051602081830303815290604052805190602001209050919050565b600061345d610f64565b8260405160200161346f9291906149f2565b604051602081830303815290604052805190602001209050919050565b505050505050565b6134b38473ffffffffffffffffffffffffffffffffffffffff16613928565b15613673578373ffffffffffffffffffffffffffffffffffffffff1663bc197c8187878686866040518663ffffffff1660e01b81526004016134f9959493929190614a82565b602060405180830381600087803b15801561351357600080fd5b505af192505050801561354457506040513d601f19601f8201168201806040525081019061354191906143ce565b60015b6135ea576135506153e5565b806308c379a014156135ad5750613565615a8d565b8061357057506135af565b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016135a49190614c7f565b60405180910390fd5b505b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016135e190614ca1565b60405180910390fd5b63bc197c8160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614613671576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161366890614ce1565b60405180910390fd5b505b505050505050565b60606000600167ffffffffffffffff8111156136c0577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156136ee5781602001602082028036833780820191505090505b509050828160008151811061372c577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101818152505080915050919050565b6137608473ffffffffffffffffffffffffffffffffffffffff16613928565b15613920578373ffffffffffffffffffffffffffffffffffffffff1663f23a6e6187878686866040518663ffffffff1660e01b81526004016137a6959493929190614aea565b602060405180830381600087803b1580156137c057600080fd5b505af19250505080156137f157506040513d601f19601f820116820180604052508101906137ee91906143ce565b60015b613897576137fd6153e5565b806308c379a0141561385a5750613812615a8d565b8061381d575061385c565b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016138519190614c7f565b60405180910390fd5b505b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161388e90614ca1565b60405180910390fd5b63f23a6e6160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161461391e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161391590614ce1565b60405180910390fd5b505b505050505050565b600080823b905060008111915050919050565b8280546139479061527e565b90600052602060002090601f01602090048101928261396957600085556139b0565b82601f1061398257805160ff19168380011785556139b0565b828001600101855582156139b0579182015b828111156139af578251825591602001919060010190613994565b5b5090506139bd91906139c1565b5090565b5b808211156139da5760008160009055506001016139c2565b5090565b60006139f16139ec84614fca565b614fa5565b90508083825260208201905082856020860282011115613a1057600080fd5b60005b85811015613a405781613a268882613bb8565b845260208401935060208301925050600181019050613a13565b5050509392505050565b6000613a5d613a5884614ff6565b614fa5565b90508083825260208201905082856020860282011115613a7c57600080fd5b60005b85811015613ac657813567ffffffffffffffff811115613a9e57600080fd5b808601613aab8982613c21565b85526020850194506020840193505050600181019050613a7f565b5050509392505050565b6000613ae3613ade84615022565b614fa5565b90508083825260208201905082856020860282011115613b0257600080fd5b60005b85811015613b325781613b188882613d08565b845260208401935060208301925050600181019050613b05565b5050509392505050565b6000613b4f613b4a8461504e565b614fa5565b905082815260208101848484011115613b6757600080fd5b613b7284828561523c565b509392505050565b6000613b8d613b888461507f565b614fa5565b905082815260208101848484011115613ba557600080fd5b613bb084828561523c565b509392505050565b600081359050613bc781615b23565b92915050565b600082601f830112613bde57600080fd5b8135613bee8482602086016139de565b91505092915050565b600082601f830112613c0857600080fd5b8135613c18848260208601613a4a565b91505092915050565b600082601f830112613c3257600080fd5b8135613c42848260208601613ad0565b91505092915050565b600081359050613c5a81615b3a565b92915050565b600081359050613c6f81615b51565b92915050565b600081359050613c8481615b68565b92915050565b600081519050613c9981615b68565b92915050565b600082601f830112613cb057600080fd5b8135613cc0848260208601613b3c565b91505092915050565b600081519050613cd881615b7f565b92915050565b600082601f830112613cef57600080fd5b8135613cff848260208601613b7a565b91505092915050565b600081359050613d1781615b96565b92915050565b600081359050613d2c81615bad565b92915050565b600060208284031215613d4457600080fd5b6000613d5284828501613bb8565b91505092915050565b60008060408385031215613d6e57600080fd5b6000613d7c85828601613bb8565b9250506020613d8d85828601613bb8565b9150509250929050565b600080600080600060a08688031215613daf57600080fd5b6000613dbd88828901613bb8565b9550506020613dce88828901613bb8565b945050604086013567ffffffffffffffff811115613deb57600080fd5b613df788828901613c21565b935050606086013567ffffffffffffffff811115613e1457600080fd5b613e2088828901613c21565b925050608086013567ffffffffffffffff811115613e3d57600080fd5b613e4988828901613c9f565b9150509295509295909350565b600080600080600060a08688031215613e6e57600080fd5b6000613e7c88828901613bb8565b9550506020613e8d88828901613bb8565b9450506040613e9e88828901613d08565b9350506060613eaf88828901613d08565b925050608086013567ffffffffffffffff811115613ecc57600080fd5b613ed888828901613c9f565b9150509295509295909350565b600080600060608486031215613efa57600080fd5b6000613f0886828701613bb8565b935050602084013567ffffffffffffffff811115613f2557600080fd5b613f3186828701613bcd565b925050604084013567ffffffffffffffff811115613f4e57600080fd5b613f5a86828701613bf7565b9150509250925092565b60008060408385031215613f7757600080fd5b6000613f8585828601613bb8565b925050602083013567ffffffffffffffff811115613fa257600080fd5b613fae85828601613c21565b9150509250929050565b60008060008060808587031215613fce57600080fd5b6000613fdc87828801613bb8565b945050602085013567ffffffffffffffff811115613ff957600080fd5b61400587828801613c21565b935050604085013567ffffffffffffffff81111561402257600080fd5b61402e87828801613c21565b925050606085013567ffffffffffffffff81111561404b57600080fd5b61405787828801613c9f565b91505092959194509250565b6000806040838503121561407657600080fd5b600061408485828601613bb8565b925050602061409585828601613c4b565b9150509250929050565b600080600080600060a086880312156140b757600080fd5b60006140c588828901613bb8565b955050602086013567ffffffffffffffff8111156140e257600080fd5b6140ee88828901613c9f565b94505060406140ff88828901613c60565b935050606061411088828901613c60565b925050608061412188828901613d1d565b9150509295509295909350565b6000806040838503121561414157600080fd5b600061414f85828601613bb8565b925050602061416085828601613d08565b9150509250929050565b6000806000806080858703121561418057600080fd5b600061418e87828801613bb8565b945050602061419f87828801613d08565b93505060406141b087828801613d08565b925050606085013567ffffffffffffffff8111156141cd57600080fd5b6141d987828801613c9f565b91505092959194509250565b600080600080600060a086880312156141fd57600080fd5b600061420b88828901613bb8565b955050602061421c88828901613d08565b945050604061422d88828901613d08565b935050606086013567ffffffffffffffff81111561424a57600080fd5b61425688828901613cde565b925050608086013567ffffffffffffffff81111561427357600080fd5b61427f88828901613c9f565b9150509295509295909350565b6000806040838503121561429f57600080fd5b600083013567ffffffffffffffff8111156142b957600080fd5b6142c585828601613bcd565b925050602083013567ffffffffffffffff8111156142e257600080fd5b6142ee85828601613bf7565b9150509250929050565b6000806040838503121561430b57600080fd5b600083013567ffffffffffffffff81111561432557600080fd5b61433185828601613bcd565b925050602083013567ffffffffffffffff81111561434e57600080fd5b61435a85828601613c21565b9150509250929050565b60006020828403121561437657600080fd5b600082013567ffffffffffffffff81111561439057600080fd5b61439c84828501613c21565b91505092915050565b6000602082840312156143b757600080fd5b60006143c584828501613c75565b91505092915050565b6000602082840312156143e057600080fd5b60006143ee84828501613c8a565b91505092915050565b60006020828403121561440957600080fd5b600061441784828501613cc9565b91505092915050565b60006020828403121561443257600080fd5b600082013567ffffffffffffffff81111561444c57600080fd5b61445884828501613cde565b91505092915050565b60006020828403121561447357600080fd5b600061448184828501613d08565b91505092915050565b6000806040838503121561449d57600080fd5b60006144ab85828601613d08565b925050602083013567ffffffffffffffff8111156144c857600080fd5b6144d485828601613cde565b9150509250929050565b60006144ea8383614986565b60208301905092915050565b6144ff8161519f565b82525050565b61450e8161518d565b82525050565b6145256145208261518d565b61532a565b82525050565b6000614536826150c0565b61454081856150ee565b935061454b836150b0565b8060005b8381101561457c57815161456388826144de565b975061456e836150e1565b92505060018101905061454f565b5085935050505092915050565b614592816151b1565b82525050565b6145a1816151bd565b82525050565b6145b86145b3826151bd565b61533c565b82525050565b60006145c9826150cb565b6145d381856150ff565b93506145e381856020860161524b565b6145ec81615407565b840191505092915050565b6000614602826150cb565b61460c8185615110565b935061461c81856020860161524b565b80840191505092915050565b6000614633826150d6565b61463d818561511b565b935061464d81856020860161524b565b61465681615407565b840191505092915050565b600061466e60348361511b565b915061467982615432565b604082019050919050565b600061469160188361511b565b915061469c82615481565b602082019050919050565b60006146b460288361511b565b91506146bf826154aa565b604082019050919050565b60006146d7602f8361511b565b91506146e2826154f9565b604082019050919050565b60006146fa602b8361511b565b915061470582615548565b604082019050919050565b600061471d60268361511b565b915061472882615597565b604082019050919050565b6000614740601c8361511b565b915061474b826155e6565b602082019050919050565b600061476360028361512c565b915061476e8261560f565b600282019050919050565b600061478660298361511b565b915061479182615638565b604082019050919050565b60006147a960258361511b565b91506147b482615687565b604082019050919050565b60006147cc60258361511b565b91506147d7826156d6565b604082019050919050565b60006147ef60328361511b565b91506147fa82615725565b604082019050919050565b600061481260268361511b565b915061481d82615774565b604082019050919050565b6000614835602a8361511b565b9150614840826157c3565b604082019050919050565b600061485860178361511b565b915061486382615812565b602082019050919050565b600061487b60208361511b565b91506148868261583b565b602082019050919050565b600061489e60218361511b565b91506148a982615864565b604082019050919050565b60006148c1602c8361511b565b91506148cc826158b3565b604082019050919050565b60006148e460298361511b565b91506148ef82615902565b604082019050919050565b600061490760298361511b565b915061491282615951565b604082019050919050565b600061492a60288361511b565b9150614935826159a0565b604082019050919050565b600061494d60218361511b565b9150614958826159ef565b604082019050919050565b600061497060318361511b565b915061497b82615a3e565b604082019050919050565b61498f81615225565b82525050565b61499e81615225565b82525050565b6149ad8161522f565b82525050565b60006149bf82846145f7565b915081905092915050565b60006149d682856145f7565b91506149e28284614514565b6014820191508190509392505050565b60006149fd82614756565b9150614a0982856145a7565b602082019150614a1982846145a7565b6020820191508190509392505050565b6000602082019050614a3e6000830184614505565b92915050565b6000606082019050614a596000830186614505565b614a6660208301856144f6565b8181036040830152614a7881846145be565b9050949350505050565b600060a082019050614a976000830188614505565b614aa46020830187614505565b8181036040830152614ab6818661452b565b90508181036060830152614aca818561452b565b90508181036080830152614ade81846145be565b90509695505050505050565b600060a082019050614aff6000830188614505565b614b0c6020830187614505565b614b196040830186614995565b614b266060830185614995565b8181036080830152614b3881846145be565b90509695505050505050565b60006020820190508181036000830152614b5e818461452b565b905092915050565b60006040820190508181036000830152614b80818561452b565b90508181036020830152614b94818461452b565b90509392505050565b6000602082019050614bb26000830184614589565b92915050565b6000602082019050614bcd6000830184614598565b92915050565b6000608082019050614be86000830187614598565b614bf56020830186614995565b614c026040830185614505565b614c0f6060830184614598565b95945050505050565b6000608082019050614c2d6000830187614598565b614c3a60208301866149a4565b614c476040830185614598565b614c546060830184614598565b95945050505050565b60006020820190508181036000830152614c7781846145be565b905092915050565b60006020820190508181036000830152614c998184614628565b905092915050565b60006020820190508181036000830152614cba81614661565b9050919050565b60006020820190508181036000830152614cda81614684565b9050919050565b60006020820190508181036000830152614cfa816146a7565b9050919050565b60006020820190508181036000830152614d1a816146ca565b9050919050565b60006020820190508181036000830152614d3a816146ed565b9050919050565b60006020820190508181036000830152614d5a81614710565b9050919050565b60006020820190508181036000830152614d7a81614733565b9050919050565b60006020820190508181036000830152614d9a81614779565b9050919050565b60006020820190508181036000830152614dba8161479c565b9050919050565b60006020820190508181036000830152614dda816147bf565b9050919050565b60006020820190508181036000830152614dfa816147e2565b9050919050565b60006020820190508181036000830152614e1a81614805565b9050919050565b60006020820190508181036000830152614e3a81614828565b9050919050565b60006020820190508181036000830152614e5a8161484b565b9050919050565b60006020820190508181036000830152614e7a8161486e565b9050919050565b60006020820190508181036000830152614e9a81614891565b9050919050565b60006020820190508181036000830152614eba816148b4565b9050919050565b60006020820190508181036000830152614eda816148d7565b9050919050565b60006020820190508181036000830152614efa816148fa565b9050919050565b60006020820190508181036000830152614f1a8161491d565b9050919050565b60006020820190508181036000830152614f3a81614940565b9050919050565b60006020820190508181036000830152614f5a81614963565b9050919050565b6000602082019050614f766000830184614995565b92915050565b6000604082019050614f916000830185614995565b614f9e6020830184614995565b9392505050565b6000614faf614fc0565b9050614fbb82826152b0565b919050565b6000604051905090565b600067ffffffffffffffff821115614fe557614fe46153b6565b5b602082029050602081019050919050565b600067ffffffffffffffff821115615011576150106153b6565b5b602082029050602081019050919050565b600067ffffffffffffffff82111561503d5761503c6153b6565b5b602082029050602081019050919050565b600067ffffffffffffffff821115615069576150686153b6565b5b61507282615407565b9050602081019050919050565b600067ffffffffffffffff82111561509a576150996153b6565b5b6150a382615407565b9050602081019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b600061514282615225565b915061514d83615225565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561518257615181615358565b5b828201905092915050565b600061519882615205565b9050919050565b60006151aa82615205565b9050919050565b60008115159050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b60006151fe8261518d565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b82818337600083830152505050565b60005b8381101561526957808201518184015260208101905061524e565b83811115615278576000848401525b50505050565b6000600282049050600182168061529657607f821691505b602082108114156152aa576152a9615387565b5b50919050565b6152b982615407565b810181811067ffffffffffffffff821117156152d8576152d76153b6565b5b80604052505050565b60006152ec82615225565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561531f5761531e615358565b5b600182019050919050565b600061533582615346565b9050919050565b6000819050919050565b600061535182615418565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600060033d11156154045760046000803e615401600051615425565b90505b90565b6000601f19601f8301169050919050565b60008160601b9050919050565b60008160e01c9050919050565b7f455243313135353a207472616e7366657220746f206e6f6e204552433131353560008201527f526563656976657220696d706c656d656e746572000000000000000000000000602082015250565b7f746f6b656e205f696420616c7265616479206578697374730000000000000000600082015250565b7f455243313135353a204552433131353552656365697665722072656a6563746560008201527f6420746f6b656e73000000000000000000000000000000000000000000000000602082015250565b7f455243313135355472616461626c652362617463684d696e743a204f4e4c595f60008201527f43524541544f525f414c4c4f5745440000000000000000000000000000000000602082015250565b7f455243313135353a2062616c616e636520717565727920666f7220746865207a60008201527f65726f2061646472657373000000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f46756e6374696f6e2063616c6c206e6f74207375636365737366756c00000000600082015250565b7f1901000000000000000000000000000000000000000000000000000000000000600082015250565b7f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260008201527f20617070726f7665640000000000000000000000000000000000000000000000602082015250565b7f4e61746976654d6574615472616e73616374696f6e3a20494e56414c49445f5360008201527f49474e4552000000000000000000000000000000000000000000000000000000602082015250565b7f455243313135353a207472616e7366657220746f20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b7f455243313135353a207472616e736665722063616c6c6572206973206e6f742060008201527f6f776e6572206e6f7220617070726f7665640000000000000000000000000000602082015250565b7f455243313135355472616461626c65237572693a204e4f4e4558495354454e5460008201527f5f544f4b454e0000000000000000000000000000000000000000000000000000602082015250565b7f455243313135353a20696e73756666696369656e742062616c616e636520666f60008201527f72207472616e7366657200000000000000000000000000000000000000000000602082015250565b7f746f6b656e20696420646f6573206e6f74206578697374000000000000000000600082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f5369676e657220616e64207369676e617475726520646f206e6f74206d61746360008201527f6800000000000000000000000000000000000000000000000000000000000000602082015250565b7f455243313135355472616461626c652373657443726561746f723a20494e564160008201527f4c49445f414444524553532e0000000000000000000000000000000000000000602082015250565b7f455243313135353a2073657474696e6720617070726f76616c2073746174757360008201527f20666f722073656c660000000000000000000000000000000000000000000000602082015250565b7f455243313135353a206163636f756e747320616e6420696473206c656e67746860008201527f206d69736d617463680000000000000000000000000000000000000000000000602082015250565b7f455243313135353a2069647320616e6420616d6f756e7473206c656e6774682060008201527f6d69736d61746368000000000000000000000000000000000000000000000000602082015250565b7f455243313135353a206d696e7420746f20746865207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b7f455243313135355472616461626c652363726561746f724f6e6c793a204f4e4c60008201527f595f43524541544f525f414c4c4f574544000000000000000000000000000000602082015250565b600060443d1015615a9d57615b20565b615aa5614fc0565b60043d036004823e80513d602482011167ffffffffffffffff82111715615acd575050615b20565b808201805167ffffffffffffffff811115615aeb5750505050615b20565b80602083010160043d038501811115615b08575050505050615b20565b615b17826020018501866152b0565b82955050505050505b90565b615b2c8161518d565b8114615b3757600080fd5b50565b615b43816151b1565b8114615b4e57600080fd5b50565b615b5a816151bd565b8114615b6557600080fd5b50565b615b71816151c7565b8114615b7c57600080fd5b50565b615b88816151f3565b8114615b9357600080fd5b50565b615b9f81615225565b8114615baa57600080fd5b50565b615bb68161522f565b8114615bc157600080fd5b5056fe4d6574615472616e73616374696f6e2875696e74323536206e6f6e63652c616464726573732066726f6d2c62797465732066756e6374696f6e5369676e617475726529a2646970667358221220ce4dd8fe7f2da868b1adcdb416a3b813de7c7282d35f8d34f95690862d41a72964736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "balanceOf(address,uint256)": {
        "details": "See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address."
      },
      "balanceOfBatch(address[],uint256[])": {
        "details": "See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length."
      },
      "batchMint(address,uint256[],uint256[],bytes)": {
        "details": "Mint tokens for each id in _ids",
        "params": {
          "_data": "Data to pass if receiver is contract",
          "_ids": "Array of ids to mint",
          "_quantities": "Array of amounts of tokens to mint per id",
          "_to": "The address to mint tokens to"
        }
      },
      "create(address,uint256,uint256,string,bytes)": {
        "details": "Creates a new token type and assigns _initialSupply to an address NOTE: remove onlyOwner if you want third parties to create new tokens on       your contract (which may change your IDs) NOTE: The token id must be passed. This allows lazy creation of tokens or       creating NFTs by setting the id's high bits with the method       described in ERC1155 or to use ids representing values other than       successive small integers. If you wish to create ids as successive       small integers you can either subclass this class to count onchain       or maintain the offchain cache of identifiers recommended in       ERC1155 and calculate successive ids from that.",
        "params": {
          "_data": "Data to pass if receiver is contract",
          "_id": "The id of the token to create (must not currenty exist).",
          "_initialOwner": "address of the first owner of the token",
          "_initialSupply": "amount to supply the first owner",
          "_uri": "Optional URI for this token type"
        },
        "returns": {
          "_0": "The newly created token ID"
        }
      },
      "mint(address,uint256,uint256,bytes)": {
        "details": "Mints some amount of tokens to an address",
        "params": {
          "_data": "Data to pass if receiver is contract",
          "_id": "Token ID to mint",
          "_quantity": "Amount of tokens to mint",
          "_to": "Address of the future owner of the token"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
        "details": "See {IERC1155-safeBatchTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,uint256,bytes)": {
        "details": "See {IERC1155-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC1155-setApprovalForAll}."
      },
      "setCreator(address,uint256[])": {
        "details": "Change the creator address for given tokens",
        "params": {
          "_ids": "Array of Token IDs to change creator",
          "_to": "Address of the new creator"
        }
      },
      "setCustomURI(uint256,string)": {
        "details": "Will update the base URI for the token",
        "params": {
          "_newURI": "New URI for the token.",
          "_tokenId": "The token to update. _msgSender() must be its creator."
        }
      },
      "setURI(string)": {
        "details": "Sets a new URI for all token types, by relying on the token type ID substitution mechanism https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].",
        "params": {
          "_newURI": "New URI for all tokens"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "totalSupply(uint256)": {
        "details": "Returns the total quantity for a token ID",
        "params": {
          "_id": "uint256 ID of the token to query"
        },
        "returns": {
          "_0": "amount of token in existence"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "NFT NFT - a contract for non-fungible tokens using ERC 1155 for batch actions",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "batchMakePermanent(uint256[])": {
        "notice": "Mark all tokens permanent in batch"
      },
      "batchTransferToMany(address,address[],uint256[][])": {
        "notice": "Allows contract owner to mass transfer to many recipients in a single transaction"
      },
      "isApprovedForAll(address,address)": {
        "notice": "Override isApprovedForAll to whitelist user's OpenSea proxy accounts to enable gas-free listings."
      },
      "makePermanent(uint256)": {
        "notice": "Mark a single token as permanent in batch"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 130,
        "contract": "contracts/NFT.sol:NFT",
        "label": "_balances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 136,
        "contract": "contracts/NFT.sol:NFT",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 138,
        "contract": "contracts/NFT.sol:NFT",
        "label": "_uri",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 3211,
        "contract": "contracts/NFT.sol:NFT",
        "label": "inited",
        "offset": 0,
        "slot": "3",
        "type": "t_bool"
      },
      {
        "astId": 3118,
        "contract": "contracts/NFT.sol:NFT",
        "label": "domainSeperator",
        "offset": 0,
        "slot": "4",
        "type": "t_bytes32"
      },
      {
        "astId": 3257,
        "contract": "contracts/NFT.sol:NFT",
        "label": "nonces",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 7,
        "contract": "contracts/NFT.sol:NFT",
        "label": "_owner",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 2280,
        "contract": "contracts/NFT.sol:NFT",
        "label": "proxyRegistryAddress",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 2284,
        "contract": "contracts/NFT.sol:NFT",
        "label": "creators",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 2288,
        "contract": "contracts/NFT.sol:NFT",
        "label": "tokenSupply",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 2292,
        "contract": "contracts/NFT.sol:NFT",
        "label": "customUri",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 2294,
        "contract": "contracts/NFT.sol:NFT",
        "label": "name",
        "offset": 0,
        "slot": "11",
        "type": "t_string_storage"
      },
      {
        "astId": 2296,
        "contract": "contracts/NFT.sol:NFT",
        "label": "symbol",
        "offset": 0,
        "slot": "12",
        "type": "t_string_storage"
      },
      {
        "astId": 2774,
        "contract": "contracts/NFT.sol:NFT",
        "label": "_contractURI",
        "offset": 0,
        "slot": "13",
        "type": "t_string_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}